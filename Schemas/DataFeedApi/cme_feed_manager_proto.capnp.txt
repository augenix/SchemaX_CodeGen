using Capnp;
using Capnp.Rpc;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace CapnpGen
{
    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0xafbadb56d67d6b72UL)]
    public class UtcTime : ICapnpSerializable
    {
        public const UInt64 typeId = 0xafbadb56d67d6b72UL;
        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            TimeNs = reader.TimeNs;
            applyDefaults();
        }

        public void serialize(WRITER writer)
        {
            writer.TimeNs = TimeNs;
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public long TimeNs
        {
            get;
            set;
        }

        = -9223372036854775808L;
        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public long TimeNs => ctx.ReadDataLong(0UL, -9223372036854775808L);
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(1, 0);
            }

            public long TimeNs
            {
                get => this.ReadDataLong(0UL, -9223372036854775808L);
                set => this.WriteData(0UL, value, -9223372036854775808L);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0xc6c900728a176a88UL)]
    public class CmeFeedManagerTimestamps : ICapnpSerializable
    {
        public const UInt64 typeId = 0xc6c900728a176a88UL;
        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            Exchange = CapnpSerializable.Create<CapnpGen.UtcTime>(reader.Exchange);
            Sending = CapnpSerializable.Create<CapnpGen.UtcTime>(reader.Sending);
            Receipt = CapnpSerializable.Create<CapnpGen.UtcTime>(reader.Receipt);
            Extract = CapnpSerializable.Create<CapnpGen.UtcTime>(reader.Extract);
            applyDefaults();
        }

        public void serialize(WRITER writer)
        {
            Exchange?.serialize(writer.Exchange);
            Sending?.serialize(writer.Sending);
            Receipt?.serialize(writer.Receipt);
            Extract?.serialize(writer.Extract);
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public CapnpGen.UtcTime Exchange
        {
            get;
            set;
        }

        public CapnpGen.UtcTime Sending
        {
            get;
            set;
        }

        public CapnpGen.UtcTime Receipt
        {
            get;
            set;
        }

        public CapnpGen.UtcTime Extract
        {
            get;
            set;
        }

        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public CapnpGen.UtcTime.READER Exchange => ctx.ReadStruct(0, CapnpGen.UtcTime.READER.create);
            public CapnpGen.UtcTime.READER Sending => ctx.ReadStruct(1, CapnpGen.UtcTime.READER.create);
            public CapnpGen.UtcTime.READER Receipt => ctx.ReadStruct(2, CapnpGen.UtcTime.READER.create);
            public CapnpGen.UtcTime.READER Extract => ctx.ReadStruct(3, CapnpGen.UtcTime.READER.create);
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(0, 4);
            }

            public CapnpGen.UtcTime.WRITER Exchange
            {
                get => BuildPointer<CapnpGen.UtcTime.WRITER>(0);
                set => Link(0, value);
            }

            public CapnpGen.UtcTime.WRITER Sending
            {
                get => BuildPointer<CapnpGen.UtcTime.WRITER>(1);
                set => Link(1, value);
            }

            public CapnpGen.UtcTime.WRITER Receipt
            {
                get => BuildPointer<CapnpGen.UtcTime.WRITER>(2);
                set => Link(2, value);
            }

            public CapnpGen.UtcTime.WRITER Extract
            {
                get => BuildPointer<CapnpGen.UtcTime.WRITER>(3);
                set => Link(3, value);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0x85afe3444143d2f7UL)]
    public class CmeFeedPriceLevel : ICapnpSerializable
    {
        public const UInt64 typeId = 0x85afe3444143d2f7UL;
        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            OrderCnt = reader.OrderCnt;
            Quantity = reader.Quantity;
            Price = reader.Price;
            applyDefaults();
        }

        public void serialize(WRITER writer)
        {
            writer.OrderCnt = OrderCnt;
            writer.Quantity = Quantity;
            writer.Price = Price;
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public uint OrderCnt
        {
            get;
            set;
        }

        public uint Quantity
        {
            get;
            set;
        }

        public double Price
        {
            get;
            set;
        }

        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public uint OrderCnt => ctx.ReadDataUInt(0UL, 0U);
            public uint Quantity => ctx.ReadDataUInt(32UL, 0U);
            public double Price => ctx.ReadDataDouble(64UL, 0);
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(2, 0);
            }

            public uint OrderCnt
            {
                get => this.ReadDataUInt(0UL, 0U);
                set => this.WriteData(0UL, value, 0U);
            }

            public uint Quantity
            {
                get => this.ReadDataUInt(32UL, 0U);
                set => this.WriteData(32UL, value, 0U);
            }

            public double Price
            {
                get => this.ReadDataDouble(64UL, 0);
                set => this.WriteData(64UL, value, 0);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0xc352e4c46abe2a05UL)]
    public class CmeFeedManagerUpdate : ICapnpSerializable
    {
        public const UInt64 typeId = 0xc352e4c46abe2a05UL;
        public enum WHICH : ushort
        {
            GroupStatus = 0,
            InstStatus = 1,
            IndicativeOpening = 2,
            OpeningPrice = 3,
            Settlement = 4,
            Trade = 5,
            Side = 6,
            LastMessageForEvent = 7,
            FinishedAll = 8,
            Firehose = 9,
            Subscribe = 10,
            SubscribeResp = 11,
            InstState = 12,
            DefinitionResp = 13,
            DefinitionReq = 14,
            SymbolAvailReq = 15,
            SymbolAvailResp = 16,
            FeedApiLogin = 17,
            FeedApiLoginResp = 18,
            FeedApiReject = 19,
            FeedApiSetSymbolList = 20,
            FeedApiSetSymbolListResp = 21,
            FeedApiGetSymbolListContents = 22,
            FeedApiGetSymbolListContentsResp = 23,
            undefined = 65535
        }

        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            switch (reader.which)
            {
                case WHICH.GroupStatus:
                    GroupStatus = CapnpSerializable.Create<CapnpGen.CmeFeedUpdateGroupStatus>(reader.GroupStatus);
                    break;
                case WHICH.InstStatus:
                    InstStatus = CapnpSerializable.Create<CapnpGen.CmeFeedUpdateInstStatus>(reader.InstStatus);
                    break;
                case WHICH.IndicativeOpening:
                    IndicativeOpening = CapnpSerializable.Create<CapnpGen.CmeFeedUpdateIndicativeOpening>(reader.IndicativeOpening);
                    break;
                case WHICH.OpeningPrice:
                    OpeningPrice = CapnpSerializable.Create<CapnpGen.CmeFeedUpdateOpeningPrice>(reader.OpeningPrice);
                    break;
                case WHICH.Settlement:
                    Settlement = CapnpSerializable.Create<CapnpGen.CmeFeedUpdateSettlement>(reader.Settlement);
                    break;
                case WHICH.Trade:
                    Trade = CapnpSerializable.Create<CapnpGen.CmeFeedUpdateTrade>(reader.Trade);
                    break;
                case WHICH.Side:
                    Side = CapnpSerializable.Create<CapnpGen.CmeFeedUpdateSide>(reader.Side);
                    break;
                case WHICH.LastMessageForEvent:
                    LastMessageForEvent = CapnpSerializable.Create<CapnpGen.CmeFeedUpdateLastMessageForEvent>(reader.LastMessageForEvent);
                    break;
                case WHICH.FinishedAll:
                    FinishedAll = CapnpSerializable.Create<CapnpGen.CmeFeedUpdateFinishedAll>(reader.FinishedAll);
                    break;
                case WHICH.Firehose:
                    Firehose = CapnpSerializable.Create<CapnpGen.CmeFeedClientFirehose>(reader.Firehose);
                    break;
                case WHICH.Subscribe:
                    Subscribe = CapnpSerializable.Create<CapnpGen.CmeFeedClientSubscribe>(reader.Subscribe);
                    break;
                case WHICH.SubscribeResp:
                    SubscribeResp = CapnpSerializable.Create<CapnpGen.CmeFeedClientSubscribeResponse>(reader.SubscribeResp);
                    break;
                case WHICH.InstState:
                    InstState = CapnpSerializable.Create<CapnpGen.CmeFeedInstrumentState>(reader.InstState);
                    break;
                case WHICH.DefinitionResp:
                    DefinitionResp = CapnpSerializable.Create<CapnpGen.CmeFuturesDefinitionResponse>(reader.DefinitionResp);
                    break;
                case WHICH.DefinitionReq:
                    DefinitionReq = CapnpSerializable.Create<CapnpGen.CmeFuturesDefinitionRequest>(reader.DefinitionReq);
                    break;
                case WHICH.SymbolAvailReq:
                    SymbolAvailReq = CapnpSerializable.Create<CapnpGen.CmeFeedRequestSymbolAvailability>(reader.SymbolAvailReq);
                    break;
                case WHICH.SymbolAvailResp:
                    SymbolAvailResp = CapnpSerializable.Create<CapnpGen.CmeFeedRequestSymbolAvailabilityResponse>(reader.SymbolAvailResp);
                    break;
                case WHICH.FeedApiLogin:
                    FeedApiLogin = CapnpSerializable.Create<CapnpGen.FeedApiLogin>(reader.FeedApiLogin);
                    break;
                case WHICH.FeedApiLoginResp:
                    FeedApiLoginResp = CapnpSerializable.Create<CapnpGen.FeedApiLoginResponse>(reader.FeedApiLoginResp);
                    break;
                case WHICH.FeedApiReject:
                    FeedApiReject = CapnpSerializable.Create<CapnpGen.FeedApiReject>(reader.FeedApiReject);
                    break;
                case WHICH.FeedApiSetSymbolList:
                    FeedApiSetSymbolList = CapnpSerializable.Create<CapnpGen.FeedApiSetSymbolList>(reader.FeedApiSetSymbolList);
                    break;
                case WHICH.FeedApiSetSymbolListResp:
                    FeedApiSetSymbolListResp = CapnpSerializable.Create<CapnpGen.FeedApiSetSymbolListResponse>(reader.FeedApiSetSymbolListResp);
                    break;
                case WHICH.FeedApiGetSymbolListContents:
                    FeedApiGetSymbolListContents = CapnpSerializable.Create<CapnpGen.FeedApiGetSymbolListContents>(reader.FeedApiGetSymbolListContents);
                    break;
                case WHICH.FeedApiGetSymbolListContentsResp:
                    FeedApiGetSymbolListContentsResp = CapnpSerializable.Create<CapnpGen.FeedApiGetSymbolListContentsResponse>(reader.FeedApiGetSymbolListContentsResp);
                    break;
            }

            applyDefaults();
        }

        private WHICH _which = WHICH.undefined;
        private object _content;
        public WHICH which
        {
            get => _which;
            set
            {
                if (value == _which)
                    return;
                _which = value;
                switch (value)
                {
                    case WHICH.GroupStatus:
                        _content = null;
                        break;
                    case WHICH.InstStatus:
                        _content = null;
                        break;
                    case WHICH.IndicativeOpening:
                        _content = null;
                        break;
                    case WHICH.OpeningPrice:
                        _content = null;
                        break;
                    case WHICH.Settlement:
                        _content = null;
                        break;
                    case WHICH.Trade:
                        _content = null;
                        break;
                    case WHICH.Side:
                        _content = null;
                        break;
                    case WHICH.LastMessageForEvent:
                        _content = null;
                        break;
                    case WHICH.FinishedAll:
                        _content = null;
                        break;
                    case WHICH.Firehose:
                        _content = null;
                        break;
                    case WHICH.Subscribe:
                        _content = null;
                        break;
                    case WHICH.SubscribeResp:
                        _content = null;
                        break;
                    case WHICH.InstState:
                        _content = null;
                        break;
                    case WHICH.DefinitionResp:
                        _content = null;
                        break;
                    case WHICH.DefinitionReq:
                        _content = null;
                        break;
                    case WHICH.SymbolAvailReq:
                        _content = null;
                        break;
                    case WHICH.SymbolAvailResp:
                        _content = null;
                        break;
                    case WHICH.FeedApiLogin:
                        _content = null;
                        break;
                    case WHICH.FeedApiLoginResp:
                        _content = null;
                        break;
                    case WHICH.FeedApiReject:
                        _content = null;
                        break;
                    case WHICH.FeedApiSetSymbolList:
                        _content = null;
                        break;
                    case WHICH.FeedApiSetSymbolListResp:
                        _content = null;
                        break;
                    case WHICH.FeedApiGetSymbolListContents:
                        _content = null;
                        break;
                    case WHICH.FeedApiGetSymbolListContentsResp:
                        _content = null;
                        break;
                }
            }
        }

        public void serialize(WRITER writer)
        {
            writer.which = which;
            switch (which)
            {
                case WHICH.GroupStatus:
                    GroupStatus?.serialize(writer.GroupStatus);
                    break;
                case WHICH.InstStatus:
                    InstStatus?.serialize(writer.InstStatus);
                    break;
                case WHICH.IndicativeOpening:
                    IndicativeOpening?.serialize(writer.IndicativeOpening);
                    break;
                case WHICH.OpeningPrice:
                    OpeningPrice?.serialize(writer.OpeningPrice);
                    break;
                case WHICH.Settlement:
                    Settlement?.serialize(writer.Settlement);
                    break;
                case WHICH.Trade:
                    Trade?.serialize(writer.Trade);
                    break;
                case WHICH.Side:
                    Side?.serialize(writer.Side);
                    break;
                case WHICH.LastMessageForEvent:
                    LastMessageForEvent?.serialize(writer.LastMessageForEvent);
                    break;
                case WHICH.FinishedAll:
                    FinishedAll?.serialize(writer.FinishedAll);
                    break;
                case WHICH.Firehose:
                    Firehose?.serialize(writer.Firehose);
                    break;
                case WHICH.Subscribe:
                    Subscribe?.serialize(writer.Subscribe);
                    break;
                case WHICH.SubscribeResp:
                    SubscribeResp?.serialize(writer.SubscribeResp);
                    break;
                case WHICH.InstState:
                    InstState?.serialize(writer.InstState);
                    break;
                case WHICH.DefinitionResp:
                    DefinitionResp?.serialize(writer.DefinitionResp);
                    break;
                case WHICH.DefinitionReq:
                    DefinitionReq?.serialize(writer.DefinitionReq);
                    break;
                case WHICH.SymbolAvailReq:
                    SymbolAvailReq?.serialize(writer.SymbolAvailReq);
                    break;
                case WHICH.SymbolAvailResp:
                    SymbolAvailResp?.serialize(writer.SymbolAvailResp);
                    break;
                case WHICH.FeedApiLogin:
                    FeedApiLogin?.serialize(writer.FeedApiLogin);
                    break;
                case WHICH.FeedApiLoginResp:
                    FeedApiLoginResp?.serialize(writer.FeedApiLoginResp);
                    break;
                case WHICH.FeedApiReject:
                    FeedApiReject?.serialize(writer.FeedApiReject);
                    break;
                case WHICH.FeedApiSetSymbolList:
                    FeedApiSetSymbolList?.serialize(writer.FeedApiSetSymbolList);
                    break;
                case WHICH.FeedApiSetSymbolListResp:
                    FeedApiSetSymbolListResp?.serialize(writer.FeedApiSetSymbolListResp);
                    break;
                case WHICH.FeedApiGetSymbolListContents:
                    FeedApiGetSymbolListContents?.serialize(writer.FeedApiGetSymbolListContents);
                    break;
                case WHICH.FeedApiGetSymbolListContentsResp:
                    FeedApiGetSymbolListContentsResp?.serialize(writer.FeedApiGetSymbolListContentsResp);
                    break;
            }
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public CapnpGen.CmeFeedUpdateGroupStatus GroupStatus
        {
            get => _which == WHICH.GroupStatus ? (CapnpGen.CmeFeedUpdateGroupStatus)_content : null;
            set
            {
                _which = WHICH.GroupStatus;
                _content = value;
            }
        }

        public CapnpGen.CmeFeedUpdateInstStatus InstStatus
        {
            get => _which == WHICH.InstStatus ? (CapnpGen.CmeFeedUpdateInstStatus)_content : null;
            set
            {
                _which = WHICH.InstStatus;
                _content = value;
            }
        }

        public CapnpGen.CmeFeedUpdateIndicativeOpening IndicativeOpening
        {
            get => _which == WHICH.IndicativeOpening ? (CapnpGen.CmeFeedUpdateIndicativeOpening)_content : null;
            set
            {
                _which = WHICH.IndicativeOpening;
                _content = value;
            }
        }

        public CapnpGen.CmeFeedUpdateOpeningPrice OpeningPrice
        {
            get => _which == WHICH.OpeningPrice ? (CapnpGen.CmeFeedUpdateOpeningPrice)_content : null;
            set
            {
                _which = WHICH.OpeningPrice;
                _content = value;
            }
        }

        public CapnpGen.CmeFeedUpdateSettlement Settlement
        {
            get => _which == WHICH.Settlement ? (CapnpGen.CmeFeedUpdateSettlement)_content : null;
            set
            {
                _which = WHICH.Settlement;
                _content = value;
            }
        }

        public CapnpGen.CmeFeedUpdateTrade Trade
        {
            get => _which == WHICH.Trade ? (CapnpGen.CmeFeedUpdateTrade)_content : null;
            set
            {
                _which = WHICH.Trade;
                _content = value;
            }
        }

        public CapnpGen.CmeFeedUpdateSide Side
        {
            get => _which == WHICH.Side ? (CapnpGen.CmeFeedUpdateSide)_content : null;
            set
            {
                _which = WHICH.Side;
                _content = value;
            }
        }

        public CapnpGen.CmeFeedUpdateLastMessageForEvent LastMessageForEvent
        {
            get => _which == WHICH.LastMessageForEvent ? (CapnpGen.CmeFeedUpdateLastMessageForEvent)_content : null;
            set
            {
                _which = WHICH.LastMessageForEvent;
                _content = value;
            }
        }

        public CapnpGen.CmeFeedUpdateFinishedAll FinishedAll
        {
            get => _which == WHICH.FinishedAll ? (CapnpGen.CmeFeedUpdateFinishedAll)_content : null;
            set
            {
                _which = WHICH.FinishedAll;
                _content = value;
            }
        }

        public CapnpGen.CmeFeedClientFirehose Firehose
        {
            get => _which == WHICH.Firehose ? (CapnpGen.CmeFeedClientFirehose)_content : null;
            set
            {
                _which = WHICH.Firehose;
                _content = value;
            }
        }

        public CapnpGen.CmeFeedClientSubscribe Subscribe
        {
            get => _which == WHICH.Subscribe ? (CapnpGen.CmeFeedClientSubscribe)_content : null;
            set
            {
                _which = WHICH.Subscribe;
                _content = value;
            }
        }

        public CapnpGen.CmeFeedClientSubscribeResponse SubscribeResp
        {
            get => _which == WHICH.SubscribeResp ? (CapnpGen.CmeFeedClientSubscribeResponse)_content : null;
            set
            {
                _which = WHICH.SubscribeResp;
                _content = value;
            }
        }

        public CapnpGen.CmeFeedInstrumentState InstState
        {
            get => _which == WHICH.InstState ? (CapnpGen.CmeFeedInstrumentState)_content : null;
            set
            {
                _which = WHICH.InstState;
                _content = value;
            }
        }

        public CapnpGen.CmeFuturesDefinitionResponse DefinitionResp
        {
            get => _which == WHICH.DefinitionResp ? (CapnpGen.CmeFuturesDefinitionResponse)_content : null;
            set
            {
                _which = WHICH.DefinitionResp;
                _content = value;
            }
        }

        public CapnpGen.CmeFuturesDefinitionRequest DefinitionReq
        {
            get => _which == WHICH.DefinitionReq ? (CapnpGen.CmeFuturesDefinitionRequest)_content : null;
            set
            {
                _which = WHICH.DefinitionReq;
                _content = value;
            }
        }

        public CapnpGen.CmeFeedRequestSymbolAvailability SymbolAvailReq
        {
            get => _which == WHICH.SymbolAvailReq ? (CapnpGen.CmeFeedRequestSymbolAvailability)_content : null;
            set
            {
                _which = WHICH.SymbolAvailReq;
                _content = value;
            }
        }

        public CapnpGen.CmeFeedRequestSymbolAvailabilityResponse SymbolAvailResp
        {
            get => _which == WHICH.SymbolAvailResp ? (CapnpGen.CmeFeedRequestSymbolAvailabilityResponse)_content : null;
            set
            {
                _which = WHICH.SymbolAvailResp;
                _content = value;
            }
        }

        public CapnpGen.FeedApiLogin FeedApiLogin
        {
            get => _which == WHICH.FeedApiLogin ? (CapnpGen.FeedApiLogin)_content : null;
            set
            {
                _which = WHICH.FeedApiLogin;
                _content = value;
            }
        }

        public CapnpGen.FeedApiLoginResponse FeedApiLoginResp
        {
            get => _which == WHICH.FeedApiLoginResp ? (CapnpGen.FeedApiLoginResponse)_content : null;
            set
            {
                _which = WHICH.FeedApiLoginResp;
                _content = value;
            }
        }

        public CapnpGen.FeedApiReject FeedApiReject
        {
            get => _which == WHICH.FeedApiReject ? (CapnpGen.FeedApiReject)_content : null;
            set
            {
                _which = WHICH.FeedApiReject;
                _content = value;
            }
        }

        public CapnpGen.FeedApiSetSymbolList FeedApiSetSymbolList
        {
            get => _which == WHICH.FeedApiSetSymbolList ? (CapnpGen.FeedApiSetSymbolList)_content : null;
            set
            {
                _which = WHICH.FeedApiSetSymbolList;
                _content = value;
            }
        }

        public CapnpGen.FeedApiSetSymbolListResponse FeedApiSetSymbolListResp
        {
            get => _which == WHICH.FeedApiSetSymbolListResp ? (CapnpGen.FeedApiSetSymbolListResponse)_content : null;
            set
            {
                _which = WHICH.FeedApiSetSymbolListResp;
                _content = value;
            }
        }

        public CapnpGen.FeedApiGetSymbolListContents FeedApiGetSymbolListContents
        {
            get => _which == WHICH.FeedApiGetSymbolListContents ? (CapnpGen.FeedApiGetSymbolListContents)_content : null;
            set
            {
                _which = WHICH.FeedApiGetSymbolListContents;
                _content = value;
            }
        }

        public CapnpGen.FeedApiGetSymbolListContentsResponse FeedApiGetSymbolListContentsResp
        {
            get => _which == WHICH.FeedApiGetSymbolListContentsResp ? (CapnpGen.FeedApiGetSymbolListContentsResponse)_content : null;
            set
            {
                _which = WHICH.FeedApiGetSymbolListContentsResp;
                _content = value;
            }
        }

        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public WHICH which => (WHICH)ctx.ReadDataUShort(0U, (ushort)0);
            public CapnpGen.CmeFeedUpdateGroupStatus.READER GroupStatus => which == WHICH.GroupStatus ? ctx.ReadStruct(0, CapnpGen.CmeFeedUpdateGroupStatus.READER.create) : default;
            public CapnpGen.CmeFeedUpdateInstStatus.READER InstStatus => which == WHICH.InstStatus ? ctx.ReadStruct(0, CapnpGen.CmeFeedUpdateInstStatus.READER.create) : default;
            public CapnpGen.CmeFeedUpdateIndicativeOpening.READER IndicativeOpening => which == WHICH.IndicativeOpening ? ctx.ReadStruct(0, CapnpGen.CmeFeedUpdateIndicativeOpening.READER.create) : default;
            public CapnpGen.CmeFeedUpdateOpeningPrice.READER OpeningPrice => which == WHICH.OpeningPrice ? ctx.ReadStruct(0, CapnpGen.CmeFeedUpdateOpeningPrice.READER.create) : default;
            public CapnpGen.CmeFeedUpdateSettlement.READER Settlement => which == WHICH.Settlement ? ctx.ReadStruct(0, CapnpGen.CmeFeedUpdateSettlement.READER.create) : default;
            public CapnpGen.CmeFeedUpdateTrade.READER Trade => which == WHICH.Trade ? ctx.ReadStruct(0, CapnpGen.CmeFeedUpdateTrade.READER.create) : default;
            public CapnpGen.CmeFeedUpdateSide.READER Side => which == WHICH.Side ? ctx.ReadStruct(0, CapnpGen.CmeFeedUpdateSide.READER.create) : default;
            public CapnpGen.CmeFeedUpdateLastMessageForEvent.READER LastMessageForEvent => which == WHICH.LastMessageForEvent ? ctx.ReadStruct(0, CapnpGen.CmeFeedUpdateLastMessageForEvent.READER.create) : default;
            public CapnpGen.CmeFeedUpdateFinishedAll.READER FinishedAll => which == WHICH.FinishedAll ? ctx.ReadStruct(0, CapnpGen.CmeFeedUpdateFinishedAll.READER.create) : default;
            public CapnpGen.CmeFeedClientFirehose.READER Firehose => which == WHICH.Firehose ? ctx.ReadStruct(0, CapnpGen.CmeFeedClientFirehose.READER.create) : default;
            public CapnpGen.CmeFeedClientSubscribe.READER Subscribe => which == WHICH.Subscribe ? ctx.ReadStruct(0, CapnpGen.CmeFeedClientSubscribe.READER.create) : default;
            public CapnpGen.CmeFeedClientSubscribeResponse.READER SubscribeResp => which == WHICH.SubscribeResp ? ctx.ReadStruct(0, CapnpGen.CmeFeedClientSubscribeResponse.READER.create) : default;
            public CapnpGen.CmeFeedInstrumentState.READER InstState => which == WHICH.InstState ? ctx.ReadStruct(0, CapnpGen.CmeFeedInstrumentState.READER.create) : default;
            public CapnpGen.CmeFuturesDefinitionResponse.READER DefinitionResp => which == WHICH.DefinitionResp ? ctx.ReadStruct(0, CapnpGen.CmeFuturesDefinitionResponse.READER.create) : default;
            public CapnpGen.CmeFuturesDefinitionRequest.READER DefinitionReq => which == WHICH.DefinitionReq ? ctx.ReadStruct(0, CapnpGen.CmeFuturesDefinitionRequest.READER.create) : default;
            public CapnpGen.CmeFeedRequestSymbolAvailability.READER SymbolAvailReq => which == WHICH.SymbolAvailReq ? ctx.ReadStruct(0, CapnpGen.CmeFeedRequestSymbolAvailability.READER.create) : default;
            public CapnpGen.CmeFeedRequestSymbolAvailabilityResponse.READER SymbolAvailResp => which == WHICH.SymbolAvailResp ? ctx.ReadStruct(0, CapnpGen.CmeFeedRequestSymbolAvailabilityResponse.READER.create) : default;
            public CapnpGen.FeedApiLogin.READER FeedApiLogin => which == WHICH.FeedApiLogin ? ctx.ReadStruct(0, CapnpGen.FeedApiLogin.READER.create) : default;
            public CapnpGen.FeedApiLoginResponse.READER FeedApiLoginResp => which == WHICH.FeedApiLoginResp ? ctx.ReadStruct(0, CapnpGen.FeedApiLoginResponse.READER.create) : default;
            public CapnpGen.FeedApiReject.READER FeedApiReject => which == WHICH.FeedApiReject ? ctx.ReadStruct(0, CapnpGen.FeedApiReject.READER.create) : default;
            public CapnpGen.FeedApiSetSymbolList.READER FeedApiSetSymbolList => which == WHICH.FeedApiSetSymbolList ? ctx.ReadStruct(0, CapnpGen.FeedApiSetSymbolList.READER.create) : default;
            public CapnpGen.FeedApiSetSymbolListResponse.READER FeedApiSetSymbolListResp => which == WHICH.FeedApiSetSymbolListResp ? ctx.ReadStruct(0, CapnpGen.FeedApiSetSymbolListResponse.READER.create) : default;
            public CapnpGen.FeedApiGetSymbolListContents.READER FeedApiGetSymbolListContents => which == WHICH.FeedApiGetSymbolListContents ? ctx.ReadStruct(0, CapnpGen.FeedApiGetSymbolListContents.READER.create) : default;
            public CapnpGen.FeedApiGetSymbolListContentsResponse.READER FeedApiGetSymbolListContentsResp => which == WHICH.FeedApiGetSymbolListContentsResp ? ctx.ReadStruct(0, CapnpGen.FeedApiGetSymbolListContentsResponse.READER.create) : default;
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(1, 1);
            }

            public WHICH which
            {
                get => (WHICH)this.ReadDataUShort(0U, (ushort)0);
                set => this.WriteData(0U, (ushort)value, (ushort)0);
            }

            public CapnpGen.CmeFeedUpdateGroupStatus.WRITER GroupStatus
            {
                get => which == WHICH.GroupStatus ? BuildPointer<CapnpGen.CmeFeedUpdateGroupStatus.WRITER>(0) : default;
                set => Link(0, value);
            }

            public CapnpGen.CmeFeedUpdateInstStatus.WRITER InstStatus
            {
                get => which == WHICH.InstStatus ? BuildPointer<CapnpGen.CmeFeedUpdateInstStatus.WRITER>(0) : default;
                set => Link(0, value);
            }

            public CapnpGen.CmeFeedUpdateIndicativeOpening.WRITER IndicativeOpening
            {
                get => which == WHICH.IndicativeOpening ? BuildPointer<CapnpGen.CmeFeedUpdateIndicativeOpening.WRITER>(0) : default;
                set => Link(0, value);
            }

            public CapnpGen.CmeFeedUpdateOpeningPrice.WRITER OpeningPrice
            {
                get => which == WHICH.OpeningPrice ? BuildPointer<CapnpGen.CmeFeedUpdateOpeningPrice.WRITER>(0) : default;
                set => Link(0, value);
            }

            public CapnpGen.CmeFeedUpdateSettlement.WRITER Settlement
            {
                get => which == WHICH.Settlement ? BuildPointer<CapnpGen.CmeFeedUpdateSettlement.WRITER>(0) : default;
                set => Link(0, value);
            }

            public CapnpGen.CmeFeedUpdateTrade.WRITER Trade
            {
                get => which == WHICH.Trade ? BuildPointer<CapnpGen.CmeFeedUpdateTrade.WRITER>(0) : default;
                set => Link(0, value);
            }

            public CapnpGen.CmeFeedUpdateSide.WRITER Side
            {
                get => which == WHICH.Side ? BuildPointer<CapnpGen.CmeFeedUpdateSide.WRITER>(0) : default;
                set => Link(0, value);
            }

            public CapnpGen.CmeFeedUpdateLastMessageForEvent.WRITER LastMessageForEvent
            {
                get => which == WHICH.LastMessageForEvent ? BuildPointer<CapnpGen.CmeFeedUpdateLastMessageForEvent.WRITER>(0) : default;
                set => Link(0, value);
            }

            public CapnpGen.CmeFeedUpdateFinishedAll.WRITER FinishedAll
            {
                get => which == WHICH.FinishedAll ? BuildPointer<CapnpGen.CmeFeedUpdateFinishedAll.WRITER>(0) : default;
                set => Link(0, value);
            }

            public CapnpGen.CmeFeedClientFirehose.WRITER Firehose
            {
                get => which == WHICH.Firehose ? BuildPointer<CapnpGen.CmeFeedClientFirehose.WRITER>(0) : default;
                set => Link(0, value);
            }

            public CapnpGen.CmeFeedClientSubscribe.WRITER Subscribe
            {
                get => which == WHICH.Subscribe ? BuildPointer<CapnpGen.CmeFeedClientSubscribe.WRITER>(0) : default;
                set => Link(0, value);
            }

            public CapnpGen.CmeFeedClientSubscribeResponse.WRITER SubscribeResp
            {
                get => which == WHICH.SubscribeResp ? BuildPointer<CapnpGen.CmeFeedClientSubscribeResponse.WRITER>(0) : default;
                set => Link(0, value);
            }

            public CapnpGen.CmeFeedInstrumentState.WRITER InstState
            {
                get => which == WHICH.InstState ? BuildPointer<CapnpGen.CmeFeedInstrumentState.WRITER>(0) : default;
                set => Link(0, value);
            }

            public CapnpGen.CmeFuturesDefinitionResponse.WRITER DefinitionResp
            {
                get => which == WHICH.DefinitionResp ? BuildPointer<CapnpGen.CmeFuturesDefinitionResponse.WRITER>(0) : default;
                set => Link(0, value);
            }

            public CapnpGen.CmeFuturesDefinitionRequest.WRITER DefinitionReq
            {
                get => which == WHICH.DefinitionReq ? BuildPointer<CapnpGen.CmeFuturesDefinitionRequest.WRITER>(0) : default;
                set => Link(0, value);
            }

            public CapnpGen.CmeFeedRequestSymbolAvailability.WRITER SymbolAvailReq
            {
                get => which == WHICH.SymbolAvailReq ? BuildPointer<CapnpGen.CmeFeedRequestSymbolAvailability.WRITER>(0) : default;
                set => Link(0, value);
            }

            public CapnpGen.CmeFeedRequestSymbolAvailabilityResponse.WRITER SymbolAvailResp
            {
                get => which == WHICH.SymbolAvailResp ? BuildPointer<CapnpGen.CmeFeedRequestSymbolAvailabilityResponse.WRITER>(0) : default;
                set => Link(0, value);
            }

            public CapnpGen.FeedApiLogin.WRITER FeedApiLogin
            {
                get => which == WHICH.FeedApiLogin ? BuildPointer<CapnpGen.FeedApiLogin.WRITER>(0) : default;
                set => Link(0, value);
            }

            public CapnpGen.FeedApiLoginResponse.WRITER FeedApiLoginResp
            {
                get => which == WHICH.FeedApiLoginResp ? BuildPointer<CapnpGen.FeedApiLoginResponse.WRITER>(0) : default;
                set => Link(0, value);
            }

            public CapnpGen.FeedApiReject.WRITER FeedApiReject
            {
                get => which == WHICH.FeedApiReject ? BuildPointer<CapnpGen.FeedApiReject.WRITER>(0) : default;
                set => Link(0, value);
            }

            public CapnpGen.FeedApiSetSymbolList.WRITER FeedApiSetSymbolList
            {
                get => which == WHICH.FeedApiSetSymbolList ? BuildPointer<CapnpGen.FeedApiSetSymbolList.WRITER>(0) : default;
                set => Link(0, value);
            }

            public CapnpGen.FeedApiSetSymbolListResponse.WRITER FeedApiSetSymbolListResp
            {
                get => which == WHICH.FeedApiSetSymbolListResp ? BuildPointer<CapnpGen.FeedApiSetSymbolListResponse.WRITER>(0) : default;
                set => Link(0, value);
            }

            public CapnpGen.FeedApiGetSymbolListContents.WRITER FeedApiGetSymbolListContents
            {
                get => which == WHICH.FeedApiGetSymbolListContents ? BuildPointer<CapnpGen.FeedApiGetSymbolListContents.WRITER>(0) : default;
                set => Link(0, value);
            }

            public CapnpGen.FeedApiGetSymbolListContentsResponse.WRITER FeedApiGetSymbolListContentsResp
            {
                get => which == WHICH.FeedApiGetSymbolListContentsResp ? BuildPointer<CapnpGen.FeedApiGetSymbolListContentsResponse.WRITER>(0) : default;
                set => Link(0, value);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0x9e95c5c0f02702a3UL)]
    public class CmeFeedUpdateGroupStatus : ICapnpSerializable
    {
        public const UInt64 typeId = 0x9e95c5c0f02702a3UL;
        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            GroupName = reader.GroupName;
            MdpChannelId = reader.MdpChannelId;
            InstGroupNum = reader.InstGroupNum;
            AssetCode = reader.AssetCode;
            Timestamp = CapnpSerializable.Create<CapnpGen.CmeFeedManagerTimestamps>(reader.Timestamp);
            TradingStatus = reader.TradingStatus;
            HaltReason = reader.HaltReason;
            TradingEvent = reader.TradingEvent;
            applyDefaults();
        }

        public void serialize(WRITER writer)
        {
            writer.GroupName = GroupName;
            writer.MdpChannelId = MdpChannelId;
            writer.InstGroupNum = InstGroupNum;
            writer.AssetCode = AssetCode;
            Timestamp?.serialize(writer.Timestamp);
            writer.TradingStatus = TradingStatus;
            writer.HaltReason = HaltReason;
            writer.TradingEvent = TradingEvent;
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public string GroupName
        {
            get;
            set;
        }

        public int MdpChannelId
        {
            get;
            set;
        }

        public ushort InstGroupNum
        {
            get;
            set;
        }

        public string AssetCode
        {
            get;
            set;
        }

        public CapnpGen.CmeFeedManagerTimestamps Timestamp
        {
            get;
            set;
        }

        public CapnpGen.TradingStatus TradingStatus
        {
            get;
            set;
        }

        = CapnpGen.TradingStatus.unknown;
        public CapnpGen.HaltReason HaltReason
        {
            get;
            set;
        }

        = CapnpGen.HaltReason.unknown;
        public CapnpGen.TradingEvent TradingEvent
        {
            get;
            set;
        }

        = CapnpGen.TradingEvent.unknown;
        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public string GroupName => ctx.ReadText(0, null);
            public int MdpChannelId => ctx.ReadDataInt(0UL, 0);
            public ushort InstGroupNum => ctx.ReadDataUShort(32UL, (ushort)0);
            public string AssetCode => ctx.ReadText(1, null);
            public CapnpGen.CmeFeedManagerTimestamps.READER Timestamp => ctx.ReadStruct(2, CapnpGen.CmeFeedManagerTimestamps.READER.create);
            public CapnpGen.TradingStatus TradingStatus => (CapnpGen.TradingStatus)ctx.ReadDataUShort(48UL, (ushort)81);
            public CapnpGen.HaltReason HaltReason => (CapnpGen.HaltReason)ctx.ReadDataUShort(64UL, (ushort)33);
            public CapnpGen.TradingEvent TradingEvent => (CapnpGen.TradingEvent)ctx.ReadDataUShort(80UL, (ushort)16);
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(2, 3);
            }

            public string GroupName
            {
                get => this.ReadText(0, null);
                set => this.WriteText(0, value, null);
            }

            public int MdpChannelId
            {
                get => this.ReadDataInt(0UL, 0);
                set => this.WriteData(0UL, value, 0);
            }

            public ushort InstGroupNum
            {
                get => this.ReadDataUShort(32UL, (ushort)0);
                set => this.WriteData(32UL, value, (ushort)0);
            }

            public string AssetCode
            {
                get => this.ReadText(1, null);
                set => this.WriteText(1, value, null);
            }

            public CapnpGen.CmeFeedManagerTimestamps.WRITER Timestamp
            {
                get => BuildPointer<CapnpGen.CmeFeedManagerTimestamps.WRITER>(2);
                set => Link(2, value);
            }

            public CapnpGen.TradingStatus TradingStatus
            {
                get => (CapnpGen.TradingStatus)this.ReadDataUShort(48UL, (ushort)81);
                set => this.WriteData(48UL, (ushort)value, (ushort)81);
            }

            public CapnpGen.HaltReason HaltReason
            {
                get => (CapnpGen.HaltReason)this.ReadDataUShort(64UL, (ushort)33);
                set => this.WriteData(64UL, (ushort)value, (ushort)33);
            }

            public CapnpGen.TradingEvent TradingEvent
            {
                get => (CapnpGen.TradingEvent)this.ReadDataUShort(80UL, (ushort)16);
                set => this.WriteData(80UL, (ushort)value, (ushort)16);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0xf8fc9c3106f5ffc9UL)]
    public class CmeFeedUpdateInstStatus : ICapnpSerializable
    {
        public const UInt64 typeId = 0xf8fc9c3106f5ffc9UL;
        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            SecurityId = reader.SecurityId;
            MdpChannelId = reader.MdpChannelId;
            InstNum = reader.InstNum;
            Timestamp = CapnpSerializable.Create<CapnpGen.CmeFeedManagerTimestamps>(reader.Timestamp);
            TradingStatus = reader.TradingStatus;
            HaltReason = reader.HaltReason;
            TradingEvent = reader.TradingEvent;
            DailyLimitPriceLbValid = reader.DailyLimitPriceLbValid;
            DailyLimitPriceLb = reader.DailyLimitPriceLb;
            DailyLimitPriceUbValid = reader.DailyLimitPriceUbValid;
            DailyLimitPriceUb = reader.DailyLimitPriceUb;
            MaxPriceVariationValid = reader.MaxPriceVariationValid;
            MaxPriceVariation = reader.MaxPriceVariation;
            applyDefaults();
        }

        public void serialize(WRITER writer)
        {
            writer.SecurityId = SecurityId;
            writer.MdpChannelId = MdpChannelId;
            writer.InstNum = InstNum;
            Timestamp?.serialize(writer.Timestamp);
            writer.TradingStatus = TradingStatus;
            writer.HaltReason = HaltReason;
            writer.TradingEvent = TradingEvent;
            writer.DailyLimitPriceLbValid = DailyLimitPriceLbValid;
            writer.DailyLimitPriceLb = DailyLimitPriceLb;
            writer.DailyLimitPriceUbValid = DailyLimitPriceUbValid;
            writer.DailyLimitPriceUb = DailyLimitPriceUb;
            writer.MaxPriceVariationValid = MaxPriceVariationValid;
            writer.MaxPriceVariation = MaxPriceVariation;
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public int SecurityId
        {
            get;
            set;
        }

        public int MdpChannelId
        {
            get;
            set;
        }

        public ushort InstNum
        {
            get;
            set;
        }

        public CapnpGen.CmeFeedManagerTimestamps Timestamp
        {
            get;
            set;
        }

        public CapnpGen.TradingStatus TradingStatus
        {
            get;
            set;
        }

        = CapnpGen.TradingStatus.unknown;
        public CapnpGen.HaltReason HaltReason
        {
            get;
            set;
        }

        = CapnpGen.HaltReason.unknown;
        public CapnpGen.TradingEvent TradingEvent
        {
            get;
            set;
        }

        = CapnpGen.TradingEvent.unknown;
        public bool DailyLimitPriceLbValid
        {
            get;
            set;
        }

        public double DailyLimitPriceLb
        {
            get;
            set;
        }

        public bool DailyLimitPriceUbValid
        {
            get;
            set;
        }

        public double DailyLimitPriceUb
        {
            get;
            set;
        }

        public bool MaxPriceVariationValid
        {
            get;
            set;
        }

        public double MaxPriceVariation
        {
            get;
            set;
        }

        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public int SecurityId => ctx.ReadDataInt(0UL, 0);
            public int MdpChannelId => ctx.ReadDataInt(32UL, 0);
            public ushort InstNum => ctx.ReadDataUShort(64UL, (ushort)0);
            public CapnpGen.CmeFeedManagerTimestamps.READER Timestamp => ctx.ReadStruct(0, CapnpGen.CmeFeedManagerTimestamps.READER.create);
            public CapnpGen.TradingStatus TradingStatus => (CapnpGen.TradingStatus)ctx.ReadDataUShort(80UL, (ushort)81);
            public CapnpGen.HaltReason HaltReason => (CapnpGen.HaltReason)ctx.ReadDataUShort(96UL, (ushort)33);
            public CapnpGen.TradingEvent TradingEvent => (CapnpGen.TradingEvent)ctx.ReadDataUShort(112UL, (ushort)16);
            public bool DailyLimitPriceLbValid => ctx.ReadDataBool(128UL, false);
            public double DailyLimitPriceLb => ctx.ReadDataDouble(192UL, 0);
            public bool DailyLimitPriceUbValid => ctx.ReadDataBool(129UL, false);
            public double DailyLimitPriceUb => ctx.ReadDataDouble(256UL, 0);
            public bool MaxPriceVariationValid => ctx.ReadDataBool(130UL, false);
            public double MaxPriceVariation => ctx.ReadDataDouble(320UL, 0);
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(6, 1);
            }

            public int SecurityId
            {
                get => this.ReadDataInt(0UL, 0);
                set => this.WriteData(0UL, value, 0);
            }

            public int MdpChannelId
            {
                get => this.ReadDataInt(32UL, 0);
                set => this.WriteData(32UL, value, 0);
            }

            public ushort InstNum
            {
                get => this.ReadDataUShort(64UL, (ushort)0);
                set => this.WriteData(64UL, value, (ushort)0);
            }

            public CapnpGen.CmeFeedManagerTimestamps.WRITER Timestamp
            {
                get => BuildPointer<CapnpGen.CmeFeedManagerTimestamps.WRITER>(0);
                set => Link(0, value);
            }

            public CapnpGen.TradingStatus TradingStatus
            {
                get => (CapnpGen.TradingStatus)this.ReadDataUShort(80UL, (ushort)81);
                set => this.WriteData(80UL, (ushort)value, (ushort)81);
            }

            public CapnpGen.HaltReason HaltReason
            {
                get => (CapnpGen.HaltReason)this.ReadDataUShort(96UL, (ushort)33);
                set => this.WriteData(96UL, (ushort)value, (ushort)33);
            }

            public CapnpGen.TradingEvent TradingEvent
            {
                get => (CapnpGen.TradingEvent)this.ReadDataUShort(112UL, (ushort)16);
                set => this.WriteData(112UL, (ushort)value, (ushort)16);
            }

            public bool DailyLimitPriceLbValid
            {
                get => this.ReadDataBool(128UL, false);
                set => this.WriteData(128UL, value, false);
            }

            public double DailyLimitPriceLb
            {
                get => this.ReadDataDouble(192UL, 0);
                set => this.WriteData(192UL, value, 0);
            }

            public bool DailyLimitPriceUbValid
            {
                get => this.ReadDataBool(129UL, false);
                set => this.WriteData(129UL, value, false);
            }

            public double DailyLimitPriceUb
            {
                get => this.ReadDataDouble(256UL, 0);
                set => this.WriteData(256UL, value, 0);
            }

            public bool MaxPriceVariationValid
            {
                get => this.ReadDataBool(130UL, false);
                set => this.WriteData(130UL, value, false);
            }

            public double MaxPriceVariation
            {
                get => this.ReadDataDouble(320UL, 0);
                set => this.WriteData(320UL, value, 0);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0xaf45e120d6544904UL)]
    public class CmeFeedUpdateIndicativeOpening : ICapnpSerializable
    {
        public const UInt64 typeId = 0xaf45e120d6544904UL;
        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            SecurityId = reader.SecurityId;
            MdpChannelId = reader.MdpChannelId;
            InstNum = reader.InstNum;
            Timestamp = CapnpSerializable.Create<CapnpGen.CmeFeedManagerTimestamps>(reader.Timestamp);
            Quantity = reader.Quantity;
            Price = reader.Price;
            applyDefaults();
        }

        public void serialize(WRITER writer)
        {
            writer.SecurityId = SecurityId;
            writer.MdpChannelId = MdpChannelId;
            writer.InstNum = InstNum;
            Timestamp?.serialize(writer.Timestamp);
            writer.Quantity = Quantity;
            writer.Price = Price;
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public int SecurityId
        {
            get;
            set;
        }

        public int MdpChannelId
        {
            get;
            set;
        }

        public ushort InstNum
        {
            get;
            set;
        }

        public CapnpGen.CmeFeedManagerTimestamps Timestamp
        {
            get;
            set;
        }

        public uint Quantity
        {
            get;
            set;
        }

        public double Price
        {
            get;
            set;
        }

        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public int SecurityId => ctx.ReadDataInt(0UL, 0);
            public int MdpChannelId => ctx.ReadDataInt(32UL, 0);
            public ushort InstNum => ctx.ReadDataUShort(64UL, (ushort)0);
            public CapnpGen.CmeFeedManagerTimestamps.READER Timestamp => ctx.ReadStruct(0, CapnpGen.CmeFeedManagerTimestamps.READER.create);
            public uint Quantity => ctx.ReadDataUInt(96UL, 0U);
            public double Price => ctx.ReadDataDouble(128UL, 0);
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(3, 1);
            }

            public int SecurityId
            {
                get => this.ReadDataInt(0UL, 0);
                set => this.WriteData(0UL, value, 0);
            }

            public int MdpChannelId
            {
                get => this.ReadDataInt(32UL, 0);
                set => this.WriteData(32UL, value, 0);
            }

            public ushort InstNum
            {
                get => this.ReadDataUShort(64UL, (ushort)0);
                set => this.WriteData(64UL, value, (ushort)0);
            }

            public CapnpGen.CmeFeedManagerTimestamps.WRITER Timestamp
            {
                get => BuildPointer<CapnpGen.CmeFeedManagerTimestamps.WRITER>(0);
                set => Link(0, value);
            }

            public uint Quantity
            {
                get => this.ReadDataUInt(96UL, 0U);
                set => this.WriteData(96UL, value, 0U);
            }

            public double Price
            {
                get => this.ReadDataDouble(128UL, 0);
                set => this.WriteData(128UL, value, 0);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0x9008fef6dfdfa993UL)]
    public class CmeFeedUpdateOpeningPrice : ICapnpSerializable
    {
        public const UInt64 typeId = 0x9008fef6dfdfa993UL;
        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            SecurityId = reader.SecurityId;
            MdpChannelId = reader.MdpChannelId;
            InstNum = reader.InstNum;
            Timestamp = CapnpSerializable.Create<CapnpGen.CmeFeedManagerTimestamps>(reader.Timestamp);
            Price = reader.Price;
            applyDefaults();
        }

        public void serialize(WRITER writer)
        {
            writer.SecurityId = SecurityId;
            writer.MdpChannelId = MdpChannelId;
            writer.InstNum = InstNum;
            Timestamp?.serialize(writer.Timestamp);
            writer.Price = Price;
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public int SecurityId
        {
            get;
            set;
        }

        public int MdpChannelId
        {
            get;
            set;
        }

        public ushort InstNum
        {
            get;
            set;
        }

        public CapnpGen.CmeFeedManagerTimestamps Timestamp
        {
            get;
            set;
        }

        public double Price
        {
            get;
            set;
        }

        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public int SecurityId => ctx.ReadDataInt(0UL, 0);
            public int MdpChannelId => ctx.ReadDataInt(32UL, 0);
            public ushort InstNum => ctx.ReadDataUShort(64UL, (ushort)0);
            public CapnpGen.CmeFeedManagerTimestamps.READER Timestamp => ctx.ReadStruct(0, CapnpGen.CmeFeedManagerTimestamps.READER.create);
            public double Price => ctx.ReadDataDouble(128UL, 0);
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(3, 1);
            }

            public int SecurityId
            {
                get => this.ReadDataInt(0UL, 0);
                set => this.WriteData(0UL, value, 0);
            }

            public int MdpChannelId
            {
                get => this.ReadDataInt(32UL, 0);
                set => this.WriteData(32UL, value, 0);
            }

            public ushort InstNum
            {
                get => this.ReadDataUShort(64UL, (ushort)0);
                set => this.WriteData(64UL, value, (ushort)0);
            }

            public CapnpGen.CmeFeedManagerTimestamps.WRITER Timestamp
            {
                get => BuildPointer<CapnpGen.CmeFeedManagerTimestamps.WRITER>(0);
                set => Link(0, value);
            }

            public double Price
            {
                get => this.ReadDataDouble(128UL, 0);
                set => this.WriteData(128UL, value, 0);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0xf6af0fc4158b6fc1UL)]
    public class CmeFeedUpdateSettlement : ICapnpSerializable
    {
        public const UInt64 typeId = 0xf6af0fc4158b6fc1UL;
        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            SecurityId = reader.SecurityId;
            MdpChannelId = reader.MdpChannelId;
            InstNum = reader.InstNum;
            Timestamp = CapnpSerializable.Create<CapnpGen.CmeFeedManagerTimestamps>(reader.Timestamp);
            PriceValid = reader.PriceValid;
            Price = reader.Price;
            PriceTimestamp = CapnpSerializable.Create<CapnpGen.UtcTime>(reader.PriceTimestamp);
            PreliminaryPriceValid = reader.PreliminaryPriceValid;
            PreliminaryPrice = reader.PreliminaryPrice;
            PreliminaryPriceTimestamp = CapnpSerializable.Create<CapnpGen.UtcTime>(reader.PreliminaryPriceTimestamp);
            applyDefaults();
        }

        public void serialize(WRITER writer)
        {
            writer.SecurityId = SecurityId;
            writer.MdpChannelId = MdpChannelId;
            writer.InstNum = InstNum;
            Timestamp?.serialize(writer.Timestamp);
            writer.PriceValid = PriceValid;
            writer.Price = Price;
            PriceTimestamp?.serialize(writer.PriceTimestamp);
            writer.PreliminaryPriceValid = PreliminaryPriceValid;
            writer.PreliminaryPrice = PreliminaryPrice;
            PreliminaryPriceTimestamp?.serialize(writer.PreliminaryPriceTimestamp);
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public int SecurityId
        {
            get;
            set;
        }

        public int MdpChannelId
        {
            get;
            set;
        }

        public ushort InstNum
        {
            get;
            set;
        }

        public CapnpGen.CmeFeedManagerTimestamps Timestamp
        {
            get;
            set;
        }

        public bool PriceValid
        {
            get;
            set;
        }

        public double Price
        {
            get;
            set;
        }

        public CapnpGen.UtcTime PriceTimestamp
        {
            get;
            set;
        }

        public bool PreliminaryPriceValid
        {
            get;
            set;
        }

        public double PreliminaryPrice
        {
            get;
            set;
        }

        public CapnpGen.UtcTime PreliminaryPriceTimestamp
        {
            get;
            set;
        }

        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public int SecurityId => ctx.ReadDataInt(0UL, 0);
            public int MdpChannelId => ctx.ReadDataInt(32UL, 0);
            public ushort InstNum => ctx.ReadDataUShort(64UL, (ushort)0);
            public CapnpGen.CmeFeedManagerTimestamps.READER Timestamp => ctx.ReadStruct(0, CapnpGen.CmeFeedManagerTimestamps.READER.create);
            public bool PriceValid => ctx.ReadDataBool(80UL, false);
            public double Price => ctx.ReadDataDouble(128UL, 0);
            public CapnpGen.UtcTime.READER PriceTimestamp => ctx.ReadStruct(1, CapnpGen.UtcTime.READER.create);
            public bool PreliminaryPriceValid => ctx.ReadDataBool(81UL, false);
            public double PreliminaryPrice => ctx.ReadDataDouble(192UL, 0);
            public CapnpGen.UtcTime.READER PreliminaryPriceTimestamp => ctx.ReadStruct(2, CapnpGen.UtcTime.READER.create);
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(4, 3);
            }

            public int SecurityId
            {
                get => this.ReadDataInt(0UL, 0);
                set => this.WriteData(0UL, value, 0);
            }

            public int MdpChannelId
            {
                get => this.ReadDataInt(32UL, 0);
                set => this.WriteData(32UL, value, 0);
            }

            public ushort InstNum
            {
                get => this.ReadDataUShort(64UL, (ushort)0);
                set => this.WriteData(64UL, value, (ushort)0);
            }

            public CapnpGen.CmeFeedManagerTimestamps.WRITER Timestamp
            {
                get => BuildPointer<CapnpGen.CmeFeedManagerTimestamps.WRITER>(0);
                set => Link(0, value);
            }

            public bool PriceValid
            {
                get => this.ReadDataBool(80UL, false);
                set => this.WriteData(80UL, value, false);
            }

            public double Price
            {
                get => this.ReadDataDouble(128UL, 0);
                set => this.WriteData(128UL, value, 0);
            }

            public CapnpGen.UtcTime.WRITER PriceTimestamp
            {
                get => BuildPointer<CapnpGen.UtcTime.WRITER>(1);
                set => Link(1, value);
            }

            public bool PreliminaryPriceValid
            {
                get => this.ReadDataBool(81UL, false);
                set => this.WriteData(81UL, value, false);
            }

            public double PreliminaryPrice
            {
                get => this.ReadDataDouble(192UL, 0);
                set => this.WriteData(192UL, value, 0);
            }

            public CapnpGen.UtcTime.WRITER PreliminaryPriceTimestamp
            {
                get => BuildPointer<CapnpGen.UtcTime.WRITER>(2);
                set => Link(2, value);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0xd60c8302ad9987b4UL)]
    public class CmeFeedUpdateTrade : ICapnpSerializable
    {
        public const UInt64 typeId = 0xd60c8302ad9987b4UL;
        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            SecurityId = reader.SecurityId;
            MdpChannelId = reader.MdpChannelId;
            InstNum = reader.InstNum;
            Timestamp = CapnpSerializable.Create<CapnpGen.CmeFeedManagerTimestamps>(reader.Timestamp);
            BookStatus = reader.BookStatus;
            AggressorSideKind = reader.AggressorSideKind;
            OrderCnt = reader.OrderCnt;
            Quantity = reader.Quantity;
            Price = reader.Price;
            applyDefaults();
        }

        public void serialize(WRITER writer)
        {
            writer.SecurityId = SecurityId;
            writer.MdpChannelId = MdpChannelId;
            writer.InstNum = InstNum;
            Timestamp?.serialize(writer.Timestamp);
            writer.BookStatus = BookStatus;
            writer.AggressorSideKind = AggressorSideKind;
            writer.OrderCnt = OrderCnt;
            writer.Quantity = Quantity;
            writer.Price = Price;
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public int SecurityId
        {
            get;
            set;
        }

        public int MdpChannelId
        {
            get;
            set;
        }

        public ushort InstNum
        {
            get;
            set;
        }

        public CapnpGen.CmeFeedManagerTimestamps Timestamp
        {
            get;
            set;
        }

        public CapnpGen.BookStatus BookStatus
        {
            get;
            set;
        }

        public CapnpGen.AggressorSideKind AggressorSideKind
        {
            get;
            set;
        }

        public uint OrderCnt
        {
            get;
            set;
        }

        public uint Quantity
        {
            get;
            set;
        }

        public double Price
        {
            get;
            set;
        }

        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public int SecurityId => ctx.ReadDataInt(0UL, 0);
            public int MdpChannelId => ctx.ReadDataInt(32UL, 0);
            public ushort InstNum => ctx.ReadDataUShort(64UL, (ushort)0);
            public CapnpGen.CmeFeedManagerTimestamps.READER Timestamp => ctx.ReadStruct(0, CapnpGen.CmeFeedManagerTimestamps.READER.create);
            public CapnpGen.BookStatus BookStatus => (CapnpGen.BookStatus)ctx.ReadDataUShort(80UL, (ushort)0);
            public CapnpGen.AggressorSideKind AggressorSideKind => (CapnpGen.AggressorSideKind)ctx.ReadDataUShort(96UL, (ushort)0);
            public uint OrderCnt => ctx.ReadDataUInt(128UL, 0U);
            public uint Quantity => ctx.ReadDataUInt(160UL, 0U);
            public double Price => ctx.ReadDataDouble(192UL, 0);
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(4, 1);
            }

            public int SecurityId
            {
                get => this.ReadDataInt(0UL, 0);
                set => this.WriteData(0UL, value, 0);
            }

            public int MdpChannelId
            {
                get => this.ReadDataInt(32UL, 0);
                set => this.WriteData(32UL, value, 0);
            }

            public ushort InstNum
            {
                get => this.ReadDataUShort(64UL, (ushort)0);
                set => this.WriteData(64UL, value, (ushort)0);
            }

            public CapnpGen.CmeFeedManagerTimestamps.WRITER Timestamp
            {
                get => BuildPointer<CapnpGen.CmeFeedManagerTimestamps.WRITER>(0);
                set => Link(0, value);
            }

            public CapnpGen.BookStatus BookStatus
            {
                get => (CapnpGen.BookStatus)this.ReadDataUShort(80UL, (ushort)0);
                set => this.WriteData(80UL, (ushort)value, (ushort)0);
            }

            public CapnpGen.AggressorSideKind AggressorSideKind
            {
                get => (CapnpGen.AggressorSideKind)this.ReadDataUShort(96UL, (ushort)0);
                set => this.WriteData(96UL, (ushort)value, (ushort)0);
            }

            public uint OrderCnt
            {
                get => this.ReadDataUInt(128UL, 0U);
                set => this.WriteData(128UL, value, 0U);
            }

            public uint Quantity
            {
                get => this.ReadDataUInt(160UL, 0U);
                set => this.WriteData(160UL, value, 0U);
            }

            public double Price
            {
                get => this.ReadDataDouble(192UL, 0);
                set => this.WriteData(192UL, value, 0);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0xcc4ff27c75edad8aUL)]
    public class CmeFeedUpdateSide : ICapnpSerializable
    {
        public const UInt64 typeId = 0xcc4ff27c75edad8aUL;
        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            SecurityId = reader.SecurityId;
            MdpChannelId = reader.MdpChannelId;
            InstNum = reader.InstNum;
            Timestamp = CapnpSerializable.Create<CapnpGen.CmeFeedManagerTimestamps>(reader.Timestamp);
            BookStatus = reader.BookStatus;
            SideKind = reader.SideKind;
            OrdersKind = reader.OrdersKind;
            IsLastSideOfBook = reader.IsLastSideOfBook;
            Levels = reader.Levels?.ToReadOnlyList(_ => CapnpSerializable.Create<CapnpGen.CmeFeedPriceLevel>(_));
            applyDefaults();
        }

        public void serialize(WRITER writer)
        {
            writer.SecurityId = SecurityId;
            writer.MdpChannelId = MdpChannelId;
            writer.InstNum = InstNum;
            Timestamp?.serialize(writer.Timestamp);
            writer.BookStatus = BookStatus;
            writer.SideKind = SideKind;
            writer.OrdersKind = OrdersKind;
            writer.IsLastSideOfBook = IsLastSideOfBook;
            writer.Levels.Init(Levels, (_s1, _v1) => _v1?.serialize(_s1));
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public int SecurityId
        {
            get;
            set;
        }

        public int MdpChannelId
        {
            get;
            set;
        }

        public ushort InstNum
        {
            get;
            set;
        }

        public CapnpGen.CmeFeedManagerTimestamps Timestamp
        {
            get;
            set;
        }

        public CapnpGen.BookStatus BookStatus
        {
            get;
            set;
        }

        public CapnpGen.BookSideKind SideKind
        {
            get;
            set;
        }

        public CapnpGen.BookSideOrdersKind OrdersKind
        {
            get;
            set;
        }

        public bool IsLastSideOfBook
        {
            get;
            set;
        }

        public IReadOnlyList<CapnpGen.CmeFeedPriceLevel> Levels
        {
            get;
            set;
        }

        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public int SecurityId => ctx.ReadDataInt(0UL, 0);
            public int MdpChannelId => ctx.ReadDataInt(32UL, 0);
            public ushort InstNum => ctx.ReadDataUShort(64UL, (ushort)0);
            public CapnpGen.CmeFeedManagerTimestamps.READER Timestamp => ctx.ReadStruct(0, CapnpGen.CmeFeedManagerTimestamps.READER.create);
            public CapnpGen.BookStatus BookStatus => (CapnpGen.BookStatus)ctx.ReadDataUShort(80UL, (ushort)0);
            public CapnpGen.BookSideKind SideKind => (CapnpGen.BookSideKind)ctx.ReadDataUShort(96UL, (ushort)0);
            public CapnpGen.BookSideOrdersKind OrdersKind => (CapnpGen.BookSideOrdersKind)ctx.ReadDataUShort(112UL, (ushort)0);
            public bool IsLastSideOfBook => ctx.ReadDataBool(128UL, false);
            public IReadOnlyList<CapnpGen.CmeFeedPriceLevel.READER> Levels => ctx.ReadList(1).Cast(CapnpGen.CmeFeedPriceLevel.READER.create);
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(3, 2);
            }

            public int SecurityId
            {
                get => this.ReadDataInt(0UL, 0);
                set => this.WriteData(0UL, value, 0);
            }

            public int MdpChannelId
            {
                get => this.ReadDataInt(32UL, 0);
                set => this.WriteData(32UL, value, 0);
            }

            public ushort InstNum
            {
                get => this.ReadDataUShort(64UL, (ushort)0);
                set => this.WriteData(64UL, value, (ushort)0);
            }

            public CapnpGen.CmeFeedManagerTimestamps.WRITER Timestamp
            {
                get => BuildPointer<CapnpGen.CmeFeedManagerTimestamps.WRITER>(0);
                set => Link(0, value);
            }

            public CapnpGen.BookStatus BookStatus
            {
                get => (CapnpGen.BookStatus)this.ReadDataUShort(80UL, (ushort)0);
                set => this.WriteData(80UL, (ushort)value, (ushort)0);
            }

            public CapnpGen.BookSideKind SideKind
            {
                get => (CapnpGen.BookSideKind)this.ReadDataUShort(96UL, (ushort)0);
                set => this.WriteData(96UL, (ushort)value, (ushort)0);
            }

            public CapnpGen.BookSideOrdersKind OrdersKind
            {
                get => (CapnpGen.BookSideOrdersKind)this.ReadDataUShort(112UL, (ushort)0);
                set => this.WriteData(112UL, (ushort)value, (ushort)0);
            }

            public bool IsLastSideOfBook
            {
                get => this.ReadDataBool(128UL, false);
                set => this.WriteData(128UL, value, false);
            }

            public ListOfStructsSerializer<CapnpGen.CmeFeedPriceLevel.WRITER> Levels
            {
                get => BuildPointer<ListOfStructsSerializer<CapnpGen.CmeFeedPriceLevel.WRITER>>(1);
                set => Link(1, value);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0xb87ebeec7741c75aUL)]
    public class CmeFeedUpdateLastMessageForEvent : ICapnpSerializable
    {
        public const UInt64 typeId = 0xb87ebeec7741c75aUL;
        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            MdpChannelId = reader.MdpChannelId;
            Timestamp = CapnpSerializable.Create<CapnpGen.CmeFeedManagerTimestamps>(reader.Timestamp);
            applyDefaults();
        }

        public void serialize(WRITER writer)
        {
            writer.MdpChannelId = MdpChannelId;
            Timestamp?.serialize(writer.Timestamp);
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public int MdpChannelId
        {
            get;
            set;
        }

        public CapnpGen.CmeFeedManagerTimestamps Timestamp
        {
            get;
            set;
        }

        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public int MdpChannelId => ctx.ReadDataInt(0UL, 0);
            public CapnpGen.CmeFeedManagerTimestamps.READER Timestamp => ctx.ReadStruct(0, CapnpGen.CmeFeedManagerTimestamps.READER.create);
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(1, 1);
            }

            public int MdpChannelId
            {
                get => this.ReadDataInt(0UL, 0);
                set => this.WriteData(0UL, value, 0);
            }

            public CapnpGen.CmeFeedManagerTimestamps.WRITER Timestamp
            {
                get => BuildPointer<CapnpGen.CmeFeedManagerTimestamps.WRITER>(0);
                set => Link(0, value);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0x9e94cd24bf753448UL)]
    public class CmeFeedUpdateFinishedAll : ICapnpSerializable
    {
        public const UInt64 typeId = 0x9e94cd24bf753448UL;
        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            ExtractTimestamp = CapnpSerializable.Create<CapnpGen.UtcTime>(reader.ExtractTimestamp);
            applyDefaults();
        }

        public void serialize(WRITER writer)
        {
            ExtractTimestamp?.serialize(writer.ExtractTimestamp);
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public CapnpGen.UtcTime ExtractTimestamp
        {
            get;
            set;
        }

        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public CapnpGen.UtcTime.READER ExtractTimestamp => ctx.ReadStruct(0, CapnpGen.UtcTime.READER.create);
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(0, 1);
            }

            public CapnpGen.UtcTime.WRITER ExtractTimestamp
            {
                get => BuildPointer<CapnpGen.UtcTime.WRITER>(0);
                set => Link(0, value);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0xa0682994c40dab37UL)]
    public class CmeFeedTradeStatistics : ICapnpSerializable
    {
        public const UInt64 typeId = 0xa0682994c40dab37UL;
        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            InstNum = reader.InstNum;
            HighPrice = reader.HighPrice;
            LowPrice = reader.LowPrice;
            LastPrice = reader.LastPrice;
            Volume = reader.Volume;
            applyDefaults();
        }

        public void serialize(WRITER writer)
        {
            writer.InstNum = InstNum;
            writer.HighPrice = HighPrice;
            writer.LowPrice = LowPrice;
            writer.LastPrice = LastPrice;
            writer.Volume = Volume;
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public ushort InstNum
        {
            get;
            set;
        }

        public double HighPrice
        {
            get;
            set;
        }

        public double LowPrice
        {
            get;
            set;
        }

        public double LastPrice
        {
            get;
            set;
        }

        public ulong Volume
        {
            get;
            set;
        }

        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public ushort InstNum => ctx.ReadDataUShort(0UL, (ushort)0);
            public double HighPrice => ctx.ReadDataDouble(64UL, 0);
            public double LowPrice => ctx.ReadDataDouble(128UL, 0);
            public double LastPrice => ctx.ReadDataDouble(192UL, 0);
            public ulong Volume => ctx.ReadDataULong(256UL, 0UL);
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(5, 0);
            }

            public ushort InstNum
            {
                get => this.ReadDataUShort(0UL, (ushort)0);
                set => this.WriteData(0UL, value, (ushort)0);
            }

            public double HighPrice
            {
                get => this.ReadDataDouble(64UL, 0);
                set => this.WriteData(64UL, value, 0);
            }

            public double LowPrice
            {
                get => this.ReadDataDouble(128UL, 0);
                set => this.WriteData(128UL, value, 0);
            }

            public double LastPrice
            {
                get => this.ReadDataDouble(192UL, 0);
                set => this.WriteData(192UL, value, 0);
            }

            public ulong Volume
            {
                get => this.ReadDataULong(256UL, 0UL);
                set => this.WriteData(256UL, value, 0UL);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0xc2e1e9de31c6d0cbUL)]
    public class CmeFeedInstrumentState : ICapnpSerializable
    {
        public const UInt64 typeId = 0xc2e1e9de31c6d0cbUL;
        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            InstNum = reader.InstNum;
            SecurityId = reader.SecurityId;
            InstStatus = CapnpSerializable.Create<CapnpGen.CmeFeedUpdateInstStatus>(reader.InstStatus);
            LastTrade = CapnpSerializable.Create<CapnpGen.CmeFeedUpdateTrade>(reader.LastTrade);
            OpeningPrice = CapnpSerializable.Create<CapnpGen.CmeFeedUpdateOpeningPrice>(reader.OpeningPrice);
            Settlement = CapnpSerializable.Create<CapnpGen.CmeFeedUpdateSettlement>(reader.Settlement);
            BidBook = CapnpSerializable.Create<CapnpGen.CmeFeedUpdateSide>(reader.BidBook);
            ImpBidBook = CapnpSerializable.Create<CapnpGen.CmeFeedUpdateSide>(reader.ImpBidBook);
            AskBook = CapnpSerializable.Create<CapnpGen.CmeFeedUpdateSide>(reader.AskBook);
            ImpAskBook = CapnpSerializable.Create<CapnpGen.CmeFeedUpdateSide>(reader.ImpAskBook);
            InstStatusValid = reader.InstStatusValid;
            LastTradeValid = reader.LastTradeValid;
            OpeningPriceValid = reader.OpeningPriceValid;
            SettlementValid = reader.SettlementValid;
            BidBookValid = reader.BidBookValid;
            ImpBidBookValid = reader.ImpBidBookValid;
            AskBookValid = reader.AskBookValid;
            ImpAskBookValid = reader.ImpAskBookValid;
            applyDefaults();
        }

        public void serialize(WRITER writer)
        {
            writer.InstNum = InstNum;
            writer.SecurityId = SecurityId;
            InstStatus?.serialize(writer.InstStatus);
            LastTrade?.serialize(writer.LastTrade);
            OpeningPrice?.serialize(writer.OpeningPrice);
            Settlement?.serialize(writer.Settlement);
            BidBook?.serialize(writer.BidBook);
            ImpBidBook?.serialize(writer.ImpBidBook);
            AskBook?.serialize(writer.AskBook);
            ImpAskBook?.serialize(writer.ImpAskBook);
            writer.InstStatusValid = InstStatusValid;
            writer.LastTradeValid = LastTradeValid;
            writer.OpeningPriceValid = OpeningPriceValid;
            writer.SettlementValid = SettlementValid;
            writer.BidBookValid = BidBookValid;
            writer.ImpBidBookValid = ImpBidBookValid;
            writer.AskBookValid = AskBookValid;
            writer.ImpAskBookValid = ImpAskBookValid;
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public ushort InstNum
        {
            get;
            set;
        }

        public int SecurityId
        {
            get;
            set;
        }

        public CapnpGen.CmeFeedUpdateInstStatus InstStatus
        {
            get;
            set;
        }

        public CapnpGen.CmeFeedUpdateTrade LastTrade
        {
            get;
            set;
        }

        public CapnpGen.CmeFeedUpdateOpeningPrice OpeningPrice
        {
            get;
            set;
        }

        public CapnpGen.CmeFeedUpdateSettlement Settlement
        {
            get;
            set;
        }

        public CapnpGen.CmeFeedUpdateSide BidBook
        {
            get;
            set;
        }

        public CapnpGen.CmeFeedUpdateSide ImpBidBook
        {
            get;
            set;
        }

        public CapnpGen.CmeFeedUpdateSide AskBook
        {
            get;
            set;
        }

        public CapnpGen.CmeFeedUpdateSide ImpAskBook
        {
            get;
            set;
        }

        public bool InstStatusValid
        {
            get;
            set;
        }

        public bool LastTradeValid
        {
            get;
            set;
        }

        public bool OpeningPriceValid
        {
            get;
            set;
        }

        public bool SettlementValid
        {
            get;
            set;
        }

        public bool BidBookValid
        {
            get;
            set;
        }

        public bool ImpBidBookValid
        {
            get;
            set;
        }

        public bool AskBookValid
        {
            get;
            set;
        }

        public bool ImpAskBookValid
        {
            get;
            set;
        }

        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public ushort InstNum => ctx.ReadDataUShort(0UL, (ushort)0);
            public int SecurityId => ctx.ReadDataInt(32UL, 0);
            public CapnpGen.CmeFeedUpdateInstStatus.READER InstStatus => ctx.ReadStruct(0, CapnpGen.CmeFeedUpdateInstStatus.READER.create);
            public CapnpGen.CmeFeedUpdateTrade.READER LastTrade => ctx.ReadStruct(1, CapnpGen.CmeFeedUpdateTrade.READER.create);
            public CapnpGen.CmeFeedUpdateOpeningPrice.READER OpeningPrice => ctx.ReadStruct(2, CapnpGen.CmeFeedUpdateOpeningPrice.READER.create);
            public CapnpGen.CmeFeedUpdateSettlement.READER Settlement => ctx.ReadStruct(3, CapnpGen.CmeFeedUpdateSettlement.READER.create);
            public CapnpGen.CmeFeedUpdateSide.READER BidBook => ctx.ReadStruct(4, CapnpGen.CmeFeedUpdateSide.READER.create);
            public CapnpGen.CmeFeedUpdateSide.READER ImpBidBook => ctx.ReadStruct(5, CapnpGen.CmeFeedUpdateSide.READER.create);
            public CapnpGen.CmeFeedUpdateSide.READER AskBook => ctx.ReadStruct(6, CapnpGen.CmeFeedUpdateSide.READER.create);
            public CapnpGen.CmeFeedUpdateSide.READER ImpAskBook => ctx.ReadStruct(7, CapnpGen.CmeFeedUpdateSide.READER.create);
            public bool InstStatusValid => ctx.ReadDataBool(16UL, false);
            public bool LastTradeValid => ctx.ReadDataBool(17UL, false);
            public bool OpeningPriceValid => ctx.ReadDataBool(18UL, false);
            public bool SettlementValid => ctx.ReadDataBool(19UL, false);
            public bool BidBookValid => ctx.ReadDataBool(20UL, false);
            public bool ImpBidBookValid => ctx.ReadDataBool(21UL, false);
            public bool AskBookValid => ctx.ReadDataBool(22UL, false);
            public bool ImpAskBookValid => ctx.ReadDataBool(23UL, false);
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(1, 8);
            }

            public ushort InstNum
            {
                get => this.ReadDataUShort(0UL, (ushort)0);
                set => this.WriteData(0UL, value, (ushort)0);
            }

            public int SecurityId
            {
                get => this.ReadDataInt(32UL, 0);
                set => this.WriteData(32UL, value, 0);
            }

            public CapnpGen.CmeFeedUpdateInstStatus.WRITER InstStatus
            {
                get => BuildPointer<CapnpGen.CmeFeedUpdateInstStatus.WRITER>(0);
                set => Link(0, value);
            }

            public CapnpGen.CmeFeedUpdateTrade.WRITER LastTrade
            {
                get => BuildPointer<CapnpGen.CmeFeedUpdateTrade.WRITER>(1);
                set => Link(1, value);
            }

            public CapnpGen.CmeFeedUpdateOpeningPrice.WRITER OpeningPrice
            {
                get => BuildPointer<CapnpGen.CmeFeedUpdateOpeningPrice.WRITER>(2);
                set => Link(2, value);
            }

            public CapnpGen.CmeFeedUpdateSettlement.WRITER Settlement
            {
                get => BuildPointer<CapnpGen.CmeFeedUpdateSettlement.WRITER>(3);
                set => Link(3, value);
            }

            public CapnpGen.CmeFeedUpdateSide.WRITER BidBook
            {
                get => BuildPointer<CapnpGen.CmeFeedUpdateSide.WRITER>(4);
                set => Link(4, value);
            }

            public CapnpGen.CmeFeedUpdateSide.WRITER ImpBidBook
            {
                get => BuildPointer<CapnpGen.CmeFeedUpdateSide.WRITER>(5);
                set => Link(5, value);
            }

            public CapnpGen.CmeFeedUpdateSide.WRITER AskBook
            {
                get => BuildPointer<CapnpGen.CmeFeedUpdateSide.WRITER>(6);
                set => Link(6, value);
            }

            public CapnpGen.CmeFeedUpdateSide.WRITER ImpAskBook
            {
                get => BuildPointer<CapnpGen.CmeFeedUpdateSide.WRITER>(7);
                set => Link(7, value);
            }

            public bool InstStatusValid
            {
                get => this.ReadDataBool(16UL, false);
                set => this.WriteData(16UL, value, false);
            }

            public bool LastTradeValid
            {
                get => this.ReadDataBool(17UL, false);
                set => this.WriteData(17UL, value, false);
            }

            public bool OpeningPriceValid
            {
                get => this.ReadDataBool(18UL, false);
                set => this.WriteData(18UL, value, false);
            }

            public bool SettlementValid
            {
                get => this.ReadDataBool(19UL, false);
                set => this.WriteData(19UL, value, false);
            }

            public bool BidBookValid
            {
                get => this.ReadDataBool(20UL, false);
                set => this.WriteData(20UL, value, false);
            }

            public bool ImpBidBookValid
            {
                get => this.ReadDataBool(21UL, false);
                set => this.WriteData(21UL, value, false);
            }

            public bool AskBookValid
            {
                get => this.ReadDataBool(22UL, false);
                set => this.WriteData(22UL, value, false);
            }

            public bool ImpAskBookValid
            {
                get => this.ReadDataBool(23UL, false);
                set => this.WriteData(23UL, value, false);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0xc191f4e36f97eeeeUL)]
    public class CmeLegDefinition : ICapnpSerializable
    {
        public const UInt64 typeId = 0xc191f4e36f97eeeeUL;
        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            SecurityId = reader.SecurityId;
            Ratio = reader.Ratio;
            applyDefaults();
        }

        public void serialize(WRITER writer)
        {
            writer.SecurityId = SecurityId;
            writer.Ratio = Ratio;
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public int SecurityId
        {
            get;
            set;
        }

        public int Ratio
        {
            get;
            set;
        }

        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public int SecurityId => ctx.ReadDataInt(0UL, 0);
            public int Ratio => ctx.ReadDataInt(32UL, 0);
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(1, 0);
            }

            public int SecurityId
            {
                get => this.ReadDataInt(0UL, 0);
                set => this.WriteData(0UL, value, 0);
            }

            public int Ratio
            {
                get => this.ReadDataInt(32UL, 0);
                set => this.WriteData(32UL, value, 0);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0xa28d4dd0e6099618UL)]
    public class CmeFuturesDefinition : ICapnpSerializable
    {
        public const UInt64 typeId = 0xa28d4dd0e6099618UL;
        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            Symbol = reader.Symbol;
            SecurityId = reader.SecurityId;
            MarketSegmentGatewayId = reader.MarketSegmentGatewayId;
            MdpChannelId = reader.MdpChannelId;
            SecurityGroupCode = reader.SecurityGroupCode;
            AssetKind = reader.AssetKind;
            AssetCode = reader.AssetCode;
            CfiCode = reader.CfiCode;
            SecuritySubtype = reader.SecuritySubtype;
            SecuritySubtypeCode = reader.SecuritySubtypeCode;
            MaturityMonthyear = reader.MaturityMonthyear;
            EquivalenceKind = reader.EquivalenceKind;
            EquivalentAssetKind = reader.EquivalentAssetKind;
            PriceValueKind = reader.PriceValueKind;
            TruePriceOffset = reader.TruePriceOffset;
            PriceToCurrency = reader.PriceToCurrency;
            MinPriceIncrement = reader.MinPriceIncrement;
            CurrencyCode = reader.CurrencyCode;
            SettleCurrencyCode = reader.SettleCurrencyCode;
            UnitOfMeasureCode = reader.UnitOfMeasureCode;
            UnitOfMeasureQuantity = reader.UnitOfMeasureQuantity;
            LimitPricesValid = reader.LimitPricesValid;
            HighLimitPrice = reader.HighLimitPrice;
            LowLimitPrice = reader.LowLimitPrice;
            MaxPriceVariationValid = reader.MaxPriceVariationValid;
            MaxPriceVariation = reader.MaxPriceVariation;
            BookDepth = reader.BookDepth;
            HasImpliedBook = reader.HasImpliedBook;
            MatchAlgorithm = reader.MatchAlgorithm;
            MinTradeVolume = reader.MinTradeVolume;
            MaxTradeVolume = reader.MaxTradeVolume;
            RelativeToPreviousSettlement = reader.RelativeToPreviousSettlement;
            ActivationTime = CapnpSerializable.Create<CapnpGen.UtcTime>(reader.ActivationTime);
            LastEligibleTradeTime = CapnpSerializable.Create<CapnpGen.UtcTime>(reader.LastEligibleTradeTime);
            Legs = reader.Legs?.ToReadOnlyList(_ => CapnpSerializable.Create<CapnpGen.CmeLegDefinition>(_));
            IsFeedAvailable = reader.IsFeedAvailable;
            InstNum = reader.InstNum;
            GroupNum = reader.GroupNum;
            applyDefaults();
        }

        public void serialize(WRITER writer)
        {
            writer.Symbol = Symbol;
            writer.SecurityId = SecurityId;
            writer.MarketSegmentGatewayId = MarketSegmentGatewayId;
            writer.MdpChannelId = MdpChannelId;
            writer.SecurityGroupCode = SecurityGroupCode;
            writer.AssetKind = AssetKind;
            writer.AssetCode = AssetCode;
            writer.CfiCode = CfiCode;
            writer.SecuritySubtype = SecuritySubtype;
            writer.SecuritySubtypeCode = SecuritySubtypeCode;
            writer.MaturityMonthyear = MaturityMonthyear;
            writer.EquivalenceKind = EquivalenceKind;
            writer.EquivalentAssetKind = EquivalentAssetKind;
            writer.PriceValueKind = PriceValueKind;
            writer.TruePriceOffset = TruePriceOffset;
            writer.PriceToCurrency = PriceToCurrency;
            writer.MinPriceIncrement = MinPriceIncrement;
            writer.CurrencyCode = CurrencyCode;
            writer.SettleCurrencyCode = SettleCurrencyCode;
            writer.UnitOfMeasureCode = UnitOfMeasureCode;
            writer.UnitOfMeasureQuantity = UnitOfMeasureQuantity;
            writer.LimitPricesValid = LimitPricesValid;
            writer.HighLimitPrice = HighLimitPrice;
            writer.LowLimitPrice = LowLimitPrice;
            writer.MaxPriceVariationValid = MaxPriceVariationValid;
            writer.MaxPriceVariation = MaxPriceVariation;
            writer.BookDepth = BookDepth;
            writer.HasImpliedBook = HasImpliedBook;
            writer.MatchAlgorithm = MatchAlgorithm;
            writer.MinTradeVolume = MinTradeVolume;
            writer.MaxTradeVolume = MaxTradeVolume;
            writer.RelativeToPreviousSettlement = RelativeToPreviousSettlement;
            ActivationTime?.serialize(writer.ActivationTime);
            LastEligibleTradeTime?.serialize(writer.LastEligibleTradeTime);
            writer.Legs.Init(Legs, (_s1, _v1) => _v1?.serialize(_s1));
            writer.IsFeedAvailable = IsFeedAvailable;
            writer.InstNum = InstNum;
            writer.GroupNum = GroupNum;
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public string Symbol
        {
            get;
            set;
        }

        public int SecurityId
        {
            get;
            set;
        }

        public int MarketSegmentGatewayId
        {
            get;
            set;
        }

        public int MdpChannelId
        {
            get;
            set;
        }

        public string SecurityGroupCode
        {
            get;
            set;
        }

        public CapnpGen.CmeAssetKind AssetKind
        {
            get;
            set;
        }

        public string AssetCode
        {
            get;
            set;
        }

        public string CfiCode
        {
            get;
            set;
        }

        public CapnpGen.CmeSecuritySubtype SecuritySubtype
        {
            get;
            set;
        }

        public string SecuritySubtypeCode
        {
            get;
            set;
        }

        public string MaturityMonthyear
        {
            get;
            set;
        }

        public CapnpGen.CmeAssetEquivalenceKind EquivalenceKind
        {
            get;
            set;
        }

        public CapnpGen.CmeAssetKind EquivalentAssetKind
        {
            get;
            set;
        }

        public CapnpGen.CmePriceValueKind PriceValueKind
        {
            get;
            set;
        }

        public double TruePriceOffset
        {
            get;
            set;
        }

        public double PriceToCurrency
        {
            get;
            set;
        }

        public double MinPriceIncrement
        {
            get;
            set;
        }

        public string CurrencyCode
        {
            get;
            set;
        }

        public string SettleCurrencyCode
        {
            get;
            set;
        }

        public string UnitOfMeasureCode
        {
            get;
            set;
        }

        public double UnitOfMeasureQuantity
        {
            get;
            set;
        }

        public bool LimitPricesValid
        {
            get;
            set;
        }

        public double HighLimitPrice
        {
            get;
            set;
        }

        public double LowLimitPrice
        {
            get;
            set;
        }

        public bool MaxPriceVariationValid
        {
            get;
            set;
        }

        public double MaxPriceVariation
        {
            get;
            set;
        }

        public int BookDepth
        {
            get;
            set;
        }

        public bool HasImpliedBook
        {
            get;
            set;
        }

        public CapnpGen.CmeMatchAlgorithm MatchAlgorithm
        {
            get;
            set;
        }

        public int MinTradeVolume
        {
            get;
            set;
        }

        public int MaxTradeVolume
        {
            get;
            set;
        }

        public bool RelativeToPreviousSettlement
        {
            get;
            set;
        }

        public CapnpGen.UtcTime ActivationTime
        {
            get;
            set;
        }

        public CapnpGen.UtcTime LastEligibleTradeTime
        {
            get;
            set;
        }

        public IReadOnlyList<CapnpGen.CmeLegDefinition> Legs
        {
            get;
            set;
        }

        public bool IsFeedAvailable
        {
            get;
            set;
        }

        public ushort InstNum
        {
            get;
            set;
        }

        = 65535;
        public ushort GroupNum
        {
            get;
            set;
        }

        = 65535;
        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public string Symbol => ctx.ReadText(0, null);
            public int SecurityId => ctx.ReadDataInt(0UL, 0);
            public int MarketSegmentGatewayId => ctx.ReadDataInt(32UL, 0);
            public int MdpChannelId => ctx.ReadDataInt(64UL, 0);
            public string SecurityGroupCode => ctx.ReadText(1, null);
            public CapnpGen.CmeAssetKind AssetKind => (CapnpGen.CmeAssetKind)ctx.ReadDataUShort(96UL, (ushort)0);
            public string AssetCode => ctx.ReadText(2, null);
            public string CfiCode => ctx.ReadText(3, null);
            public CapnpGen.CmeSecuritySubtype SecuritySubtype => (CapnpGen.CmeSecuritySubtype)ctx.ReadDataUShort(112UL, (ushort)0);
            public string SecuritySubtypeCode => ctx.ReadText(4, null);
            public string MaturityMonthyear => ctx.ReadText(5, null);
            public CapnpGen.CmeAssetEquivalenceKind EquivalenceKind => (CapnpGen.CmeAssetEquivalenceKind)ctx.ReadDataUShort(128UL, (ushort)0);
            public CapnpGen.CmeAssetKind EquivalentAssetKind => (CapnpGen.CmeAssetKind)ctx.ReadDataUShort(144UL, (ushort)0);
            public CapnpGen.CmePriceValueKind PriceValueKind => (CapnpGen.CmePriceValueKind)ctx.ReadDataUShort(160UL, (ushort)0);
            public double TruePriceOffset => ctx.ReadDataDouble(192UL, 0);
            public double PriceToCurrency => ctx.ReadDataDouble(256UL, 0);
            public double MinPriceIncrement => ctx.ReadDataDouble(320UL, 0);
            public string CurrencyCode => ctx.ReadText(6, null);
            public string SettleCurrencyCode => ctx.ReadText(7, null);
            public string UnitOfMeasureCode => ctx.ReadText(8, null);
            public double UnitOfMeasureQuantity => ctx.ReadDataDouble(384UL, 0);
            public bool LimitPricesValid => ctx.ReadDataBool(176UL, false);
            public double HighLimitPrice => ctx.ReadDataDouble(448UL, 0);
            public double LowLimitPrice => ctx.ReadDataDouble(512UL, 0);
            public bool MaxPriceVariationValid => ctx.ReadDataBool(177UL, false);
            public double MaxPriceVariation => ctx.ReadDataDouble(576UL, 0);
            public int BookDepth => ctx.ReadDataInt(640UL, 0);
            public bool HasImpliedBook => ctx.ReadDataBool(178UL, false);
            public CapnpGen.CmeMatchAlgorithm MatchAlgorithm => (CapnpGen.CmeMatchAlgorithm)ctx.ReadDataUShort(672UL, (ushort)0);
            public int MinTradeVolume => ctx.ReadDataInt(704UL, 0);
            public int MaxTradeVolume => ctx.ReadDataInt(736UL, 0);
            public bool RelativeToPreviousSettlement => ctx.ReadDataBool(179UL, false);
            public CapnpGen.UtcTime.READER ActivationTime => ctx.ReadStruct(9, CapnpGen.UtcTime.READER.create);
            public CapnpGen.UtcTime.READER LastEligibleTradeTime => ctx.ReadStruct(10, CapnpGen.UtcTime.READER.create);
            public IReadOnlyList<CapnpGen.CmeLegDefinition.READER> Legs => ctx.ReadList(11).Cast(CapnpGen.CmeLegDefinition.READER.create);
            public bool IsFeedAvailable => ctx.ReadDataBool(180UL, false);
            public ushort InstNum => ctx.ReadDataUShort(688UL, (ushort)65535);
            public ushort GroupNum => ctx.ReadDataUShort(768UL, (ushort)65535);
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(13, 12);
            }

            public string Symbol
            {
                get => this.ReadText(0, null);
                set => this.WriteText(0, value, null);
            }

            public int SecurityId
            {
                get => this.ReadDataInt(0UL, 0);
                set => this.WriteData(0UL, value, 0);
            }

            public int MarketSegmentGatewayId
            {
                get => this.ReadDataInt(32UL, 0);
                set => this.WriteData(32UL, value, 0);
            }

            public int MdpChannelId
            {
                get => this.ReadDataInt(64UL, 0);
                set => this.WriteData(64UL, value, 0);
            }

            public string SecurityGroupCode
            {
                get => this.ReadText(1, null);
                set => this.WriteText(1, value, null);
            }

            public CapnpGen.CmeAssetKind AssetKind
            {
                get => (CapnpGen.CmeAssetKind)this.ReadDataUShort(96UL, (ushort)0);
                set => this.WriteData(96UL, (ushort)value, (ushort)0);
            }

            public string AssetCode
            {
                get => this.ReadText(2, null);
                set => this.WriteText(2, value, null);
            }

            public string CfiCode
            {
                get => this.ReadText(3, null);
                set => this.WriteText(3, value, null);
            }

            public CapnpGen.CmeSecuritySubtype SecuritySubtype
            {
                get => (CapnpGen.CmeSecuritySubtype)this.ReadDataUShort(112UL, (ushort)0);
                set => this.WriteData(112UL, (ushort)value, (ushort)0);
            }

            public string SecuritySubtypeCode
            {
                get => this.ReadText(4, null);
                set => this.WriteText(4, value, null);
            }

            public string MaturityMonthyear
            {
                get => this.ReadText(5, null);
                set => this.WriteText(5, value, null);
            }

            public CapnpGen.CmeAssetEquivalenceKind EquivalenceKind
            {
                get => (CapnpGen.CmeAssetEquivalenceKind)this.ReadDataUShort(128UL, (ushort)0);
                set => this.WriteData(128UL, (ushort)value, (ushort)0);
            }

            public CapnpGen.CmeAssetKind EquivalentAssetKind
            {
                get => (CapnpGen.CmeAssetKind)this.ReadDataUShort(144UL, (ushort)0);
                set => this.WriteData(144UL, (ushort)value, (ushort)0);
            }

            public CapnpGen.CmePriceValueKind PriceValueKind
            {
                get => (CapnpGen.CmePriceValueKind)this.ReadDataUShort(160UL, (ushort)0);
                set => this.WriteData(160UL, (ushort)value, (ushort)0);
            }

            public double TruePriceOffset
            {
                get => this.ReadDataDouble(192UL, 0);
                set => this.WriteData(192UL, value, 0);
            }

            public double PriceToCurrency
            {
                get => this.ReadDataDouble(256UL, 0);
                set => this.WriteData(256UL, value, 0);
            }

            public double MinPriceIncrement
            {
                get => this.ReadDataDouble(320UL, 0);
                set => this.WriteData(320UL, value, 0);
            }

            public string CurrencyCode
            {
                get => this.ReadText(6, null);
                set => this.WriteText(6, value, null);
            }

            public string SettleCurrencyCode
            {
                get => this.ReadText(7, null);
                set => this.WriteText(7, value, null);
            }

            public string UnitOfMeasureCode
            {
                get => this.ReadText(8, null);
                set => this.WriteText(8, value, null);
            }

            public double UnitOfMeasureQuantity
            {
                get => this.ReadDataDouble(384UL, 0);
                set => this.WriteData(384UL, value, 0);
            }

            public bool LimitPricesValid
            {
                get => this.ReadDataBool(176UL, false);
                set => this.WriteData(176UL, value, false);
            }

            public double HighLimitPrice
            {
                get => this.ReadDataDouble(448UL, 0);
                set => this.WriteData(448UL, value, 0);
            }

            public double LowLimitPrice
            {
                get => this.ReadDataDouble(512UL, 0);
                set => this.WriteData(512UL, value, 0);
            }

            public bool MaxPriceVariationValid
            {
                get => this.ReadDataBool(177UL, false);
                set => this.WriteData(177UL, value, false);
            }

            public double MaxPriceVariation
            {
                get => this.ReadDataDouble(576UL, 0);
                set => this.WriteData(576UL, value, 0);
            }

            public int BookDepth
            {
                get => this.ReadDataInt(640UL, 0);
                set => this.WriteData(640UL, value, 0);
            }

            public bool HasImpliedBook
            {
                get => this.ReadDataBool(178UL, false);
                set => this.WriteData(178UL, value, false);
            }

            public CapnpGen.CmeMatchAlgorithm MatchAlgorithm
            {
                get => (CapnpGen.CmeMatchAlgorithm)this.ReadDataUShort(672UL, (ushort)0);
                set => this.WriteData(672UL, (ushort)value, (ushort)0);
            }

            public int MinTradeVolume
            {
                get => this.ReadDataInt(704UL, 0);
                set => this.WriteData(704UL, value, 0);
            }

            public int MaxTradeVolume
            {
                get => this.ReadDataInt(736UL, 0);
                set => this.WriteData(736UL, value, 0);
            }

            public bool RelativeToPreviousSettlement
            {
                get => this.ReadDataBool(179UL, false);
                set => this.WriteData(179UL, value, false);
            }

            public CapnpGen.UtcTime.WRITER ActivationTime
            {
                get => BuildPointer<CapnpGen.UtcTime.WRITER>(9);
                set => Link(9, value);
            }

            public CapnpGen.UtcTime.WRITER LastEligibleTradeTime
            {
                get => BuildPointer<CapnpGen.UtcTime.WRITER>(10);
                set => Link(10, value);
            }

            public ListOfStructsSerializer<CapnpGen.CmeLegDefinition.WRITER> Legs
            {
                get => BuildPointer<ListOfStructsSerializer<CapnpGen.CmeLegDefinition.WRITER>>(11);
                set => Link(11, value);
            }

            public bool IsFeedAvailable
            {
                get => this.ReadDataBool(180UL, false);
                set => this.WriteData(180UL, value, false);
            }

            public ushort InstNum
            {
                get => this.ReadDataUShort(688UL, (ushort)65535);
                set => this.WriteData(688UL, value, (ushort)65535);
            }

            public ushort GroupNum
            {
                get => this.ReadDataUShort(768UL, (ushort)65535);
                set => this.WriteData(768UL, value, (ushort)65535);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0x997d38cf30000e38UL)]
    public class CmeFuturesDefinitionResponse : ICapnpSerializable
    {
        public const UInt64 typeId = 0x997d38cf30000e38UL;
        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            Definitions = reader.Definitions?.ToReadOnlyList(_ => CapnpSerializable.Create<CapnpGen.CmeFuturesDefinition>(_));
            Error = reader.Error;
            applyDefaults();
        }

        public void serialize(WRITER writer)
        {
            writer.Definitions.Init(Definitions, (_s1, _v1) => _v1?.serialize(_s1));
            writer.Error = Error;
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public IReadOnlyList<CapnpGen.CmeFuturesDefinition> Definitions
        {
            get;
            set;
        }

        public string Error
        {
            get;
            set;
        }

        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public IReadOnlyList<CapnpGen.CmeFuturesDefinition.READER> Definitions => ctx.ReadList(0).Cast(CapnpGen.CmeFuturesDefinition.READER.create);
            public string Error => ctx.ReadText(1, null);
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(0, 2);
            }

            public ListOfStructsSerializer<CapnpGen.CmeFuturesDefinition.WRITER> Definitions
            {
                get => BuildPointer<ListOfStructsSerializer<CapnpGen.CmeFuturesDefinition.WRITER>>(0);
                set => Link(0, value);
            }

            public string Error
            {
                get => this.ReadText(1, null);
                set => this.WriteText(1, value, null);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0xceed7fd6b7734597UL)]
    public enum AvailabilityAction : ushort
    {
        @add,
        @remove
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0x8d01b5f7e04c5940UL)]
    public class CmeFeedRequestSymbolAvailabilityResponse : ICapnpSerializable
    {
        public const UInt64 typeId = 0x8d01b5f7e04c5940UL;
        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            Success = reader.Success;
            Action = reader.Action;
            InstNum = reader.InstNum;
            SecurityId = reader.SecurityId;
            Symbol = reader.Symbol;
            Error = reader.Error;
            applyDefaults();
        }

        public void serialize(WRITER writer)
        {
            writer.Success = Success;
            writer.Action = Action;
            writer.InstNum = InstNum;
            writer.SecurityId = SecurityId;
            writer.Symbol = Symbol;
            writer.Error = Error;
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public bool Success
        {
            get;
            set;
        }

        public CapnpGen.AvailabilityAction Action
        {
            get;
            set;
        }

        public ushort InstNum
        {
            get;
            set;
        }

        public int SecurityId
        {
            get;
            set;
        }

        public string Symbol
        {
            get;
            set;
        }

        public string Error
        {
            get;
            set;
        }

        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public bool Success => ctx.ReadDataBool(0UL, false);
            public CapnpGen.AvailabilityAction Action => (CapnpGen.AvailabilityAction)ctx.ReadDataUShort(16UL, (ushort)0);
            public ushort InstNum => ctx.ReadDataUShort(32UL, (ushort)0);
            public int SecurityId => ctx.ReadDataInt(64UL, 0);
            public string Symbol => ctx.ReadText(0, null);
            public string Error => ctx.ReadText(1, null);
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(2, 2);
            }

            public bool Success
            {
                get => this.ReadDataBool(0UL, false);
                set => this.WriteData(0UL, value, false);
            }

            public CapnpGen.AvailabilityAction Action
            {
                get => (CapnpGen.AvailabilityAction)this.ReadDataUShort(16UL, (ushort)0);
                set => this.WriteData(16UL, (ushort)value, (ushort)0);
            }

            public ushort InstNum
            {
                get => this.ReadDataUShort(32UL, (ushort)0);
                set => this.WriteData(32UL, value, (ushort)0);
            }

            public int SecurityId
            {
                get => this.ReadDataInt(64UL, 0);
                set => this.WriteData(64UL, value, 0);
            }

            public string Symbol
            {
                get => this.ReadText(0, null);
                set => this.WriteText(0, value, null);
            }

            public string Error
            {
                get => this.ReadText(1, null);
                set => this.WriteText(1, value, null);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0xe834d72fc01bb331UL)]
    public enum FirehoseAction : ushort
    {
        unsubscribe,
        subscribe
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0xf98c418294b40f0aUL)]
    public class CmeFeedClientFirehose : ICapnpSerializable
    {
        public const UInt64 typeId = 0xf98c418294b40f0aUL;
        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            Action = reader.Action;
            applyDefaults();
        }

        public void serialize(WRITER writer)
        {
            writer.Action = Action;
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public CapnpGen.FirehoseAction Action
        {
            get;
            set;
        }

        = CapnpGen.FirehoseAction.subscribe;
        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public CapnpGen.FirehoseAction Action => (CapnpGen.FirehoseAction)ctx.ReadDataUShort(0UL, (ushort)1);
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(1, 0);
            }

            public CapnpGen.FirehoseAction Action
            {
                get => (CapnpGen.FirehoseAction)this.ReadDataUShort(0UL, (ushort)1);
                set => this.WriteData(0UL, (ushort)value, (ushort)1);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0xd8eb56fb8a2a3284UL)]
    public enum SubscriptionAction : ushort
    {
        unsubscribe,
        subscribe,
        subscribeAndGetState
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0xcda169d93b9e7a34UL)]
    public class CmeFeedClientSubscribe : ICapnpSerializable
    {
        public const UInt64 typeId = 0xcda169d93b9e7a34UL;
        public enum WHICH : ushort
        {
            SecurityIdList = 0,
            InstList = 1,
            undefined = 65535
        }

        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            switch (reader.which)
            {
                case WHICH.SecurityIdList:
                    SecurityIdList = reader.SecurityIdList;
                    break;
                case WHICH.InstList:
                    InstList = reader.InstList;
                    break;
            }

            Action = reader.Action;
            OrdersKind = reader.OrdersKind;
            DepthList = reader.DepthList;
            applyDefaults();
        }

        private WHICH _which = WHICH.undefined;
        private object _content;
        public WHICH which
        {
            get => _which;
            set
            {
                if (value == _which)
                    return;
                _which = value;
                switch (value)
                {
                    case WHICH.SecurityIdList:
                        _content = null;
                        break;
                    case WHICH.InstList:
                        _content = null;
                        break;
                }
            }
        }

        public void serialize(WRITER writer)
        {
            writer.which = which;
            switch (which)
            {
                case WHICH.SecurityIdList:
                    writer.SecurityIdList.Init(SecurityIdList);
                    break;
                case WHICH.InstList:
                    writer.InstList.Init(InstList);
                    break;
            }

            writer.Action = Action;
            writer.OrdersKind = OrdersKind;
            writer.DepthList.Init(DepthList);
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public CapnpGen.SubscriptionAction Action
        {
            get;
            set;
        }

        = CapnpGen.SubscriptionAction.subscribeAndGetState;
        public IReadOnlyList<int> SecurityIdList
        {
            get => _which == WHICH.SecurityIdList ? (IReadOnlyList<int>)_content : null;
            set
            {
                _which = WHICH.SecurityIdList;
                _content = value;
            }
        }

        public IReadOnlyList<ushort> InstList
        {
            get => _which == WHICH.InstList ? (IReadOnlyList<ushort>)_content : null;
            set
            {
                _which = WHICH.InstList;
                _content = value;
            }
        }

        public CapnpGen.BookSideOrdersKind OrdersKind
        {
            get;
            set;
        }

        public IReadOnlyList<ushort> DepthList
        {
            get;
            set;
        }

        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public WHICH which => (WHICH)ctx.ReadDataUShort(16U, (ushort)0);
            public CapnpGen.SubscriptionAction Action => (CapnpGen.SubscriptionAction)ctx.ReadDataUShort(0UL, (ushort)2);
            public IReadOnlyList<int> SecurityIdList => which == WHICH.SecurityIdList ? ctx.ReadList(0).CastInt() : default;
            public IReadOnlyList<ushort> InstList => which == WHICH.InstList ? ctx.ReadList(0).CastUShort() : default;
            public CapnpGen.BookSideOrdersKind OrdersKind => (CapnpGen.BookSideOrdersKind)ctx.ReadDataUShort(32UL, (ushort)0);
            public IReadOnlyList<ushort> DepthList => ctx.ReadList(1).CastUShort();
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(1, 2);
            }

            public WHICH which
            {
                get => (WHICH)this.ReadDataUShort(16U, (ushort)0);
                set => this.WriteData(16U, (ushort)value, (ushort)0);
            }

            public CapnpGen.SubscriptionAction Action
            {
                get => (CapnpGen.SubscriptionAction)this.ReadDataUShort(0UL, (ushort)2);
                set => this.WriteData(0UL, (ushort)value, (ushort)2);
            }

            public ListOfPrimitivesSerializer<int> SecurityIdList
            {
                get => which == WHICH.SecurityIdList ? BuildPointer<ListOfPrimitivesSerializer<int>>(0) : default;
                set => Link(0, value);
            }

            public ListOfPrimitivesSerializer<ushort> InstList
            {
                get => which == WHICH.InstList ? BuildPointer<ListOfPrimitivesSerializer<ushort>>(0) : default;
                set => Link(0, value);
            }

            public CapnpGen.BookSideOrdersKind OrdersKind
            {
                get => (CapnpGen.BookSideOrdersKind)this.ReadDataUShort(32UL, (ushort)0);
                set => this.WriteData(32UL, (ushort)value, (ushort)0);
            }

            public ListOfPrimitivesSerializer<ushort> DepthList
            {
                get => BuildPointer<ListOfPrimitivesSerializer<ushort>>(1);
                set => Link(1, value);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0x8a1cfa42e4b7d915UL)]
    public enum CmeFeedClientSubscribeResult : ushort
    {
        success,
        failedOrdersKind,
        failedBadSecurityId,
        failedBadInstNum,
        failedDepthValue,
        invalid
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0xd70a2c46d9cab070UL)]
    public class CmeFeedClientSubscribeResponse : ICapnpSerializable
    {
        public const UInt64 typeId = 0xd70a2c46d9cab070UL;
        public enum WHICH : ushort
        {
            BadSecurityIdList = 0,
            BadInstList = 1,
            undefined = 65535
        }

        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            switch (reader.which)
            {
                case WHICH.BadSecurityIdList:
                    BadSecurityIdList = reader.BadSecurityIdList;
                    break;
                case WHICH.BadInstList:
                    BadInstList = reader.BadInstList;
                    break;
            }

            Result = reader.Result;
            applyDefaults();
        }

        private WHICH _which = WHICH.undefined;
        private object _content;
        public WHICH which
        {
            get => _which;
            set
            {
                if (value == _which)
                    return;
                _which = value;
                switch (value)
                {
                    case WHICH.BadSecurityIdList:
                        _content = null;
                        break;
                    case WHICH.BadInstList:
                        _content = null;
                        break;
                }
            }
        }

        public void serialize(WRITER writer)
        {
            writer.which = which;
            switch (which)
            {
                case WHICH.BadSecurityIdList:
                    writer.BadSecurityIdList.Init(BadSecurityIdList);
                    break;
                case WHICH.BadInstList:
                    writer.BadInstList.Init(BadInstList);
                    break;
            }

            writer.Result = Result;
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public CapnpGen.CmeFeedClientSubscribeResult Result
        {
            get;
            set;
        }

        public IReadOnlyList<int> BadSecurityIdList
        {
            get => _which == WHICH.BadSecurityIdList ? (IReadOnlyList<int>)_content : null;
            set
            {
                _which = WHICH.BadSecurityIdList;
                _content = value;
            }
        }

        public IReadOnlyList<ushort> BadInstList
        {
            get => _which == WHICH.BadInstList ? (IReadOnlyList<ushort>)_content : null;
            set
            {
                _which = WHICH.BadInstList;
                _content = value;
            }
        }

        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public WHICH which => (WHICH)ctx.ReadDataUShort(16U, (ushort)0);
            public CapnpGen.CmeFeedClientSubscribeResult Result => (CapnpGen.CmeFeedClientSubscribeResult)ctx.ReadDataUShort(0UL, (ushort)0);
            public IReadOnlyList<int> BadSecurityIdList => which == WHICH.BadSecurityIdList ? ctx.ReadList(0).CastInt() : default;
            public IReadOnlyList<ushort> BadInstList => which == WHICH.BadInstList ? ctx.ReadList(0).CastUShort() : default;
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(1, 1);
            }

            public WHICH which
            {
                get => (WHICH)this.ReadDataUShort(16U, (ushort)0);
                set => this.WriteData(16U, (ushort)value, (ushort)0);
            }

            public CapnpGen.CmeFeedClientSubscribeResult Result
            {
                get => (CapnpGen.CmeFeedClientSubscribeResult)this.ReadDataUShort(0UL, (ushort)0);
                set => this.WriteData(0UL, (ushort)value, (ushort)0);
            }

            public ListOfPrimitivesSerializer<int> BadSecurityIdList
            {
                get => which == WHICH.BadSecurityIdList ? BuildPointer<ListOfPrimitivesSerializer<int>>(0) : default;
                set => Link(0, value);
            }

            public ListOfPrimitivesSerializer<ushort> BadInstList
            {
                get => which == WHICH.BadInstList ? BuildPointer<ListOfPrimitivesSerializer<ushort>>(0) : default;
                set => Link(0, value);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0xb10e58fd7a0e8d5eUL)]
    public class CmeFuturesDefinitionSpec : ICapnpSerializable
    {
        public const UInt64 typeId = 0xb10e58fd7a0e8d5eUL;
        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            AssetKind = reader.AssetKind;
            SecuritySubtype = reader.SecuritySubtype;
            SecurityGroupCode = reader.SecurityGroupCode;
            ActivationTimeLb = CapnpSerializable.Create<CapnpGen.UtcTime>(reader.ActivationTimeLb);
            ActivationTimeUb = CapnpSerializable.Create<CapnpGen.UtcTime>(reader.ActivationTimeUb);
            LastEligibleTradeTimeLb = CapnpSerializable.Create<CapnpGen.UtcTime>(reader.LastEligibleTradeTimeLb);
            LastEligibleTradeTimeUb = CapnpSerializable.Create<CapnpGen.UtcTime>(reader.LastEligibleTradeTimeUb);
            applyDefaults();
        }

        public void serialize(WRITER writer)
        {
            writer.AssetKind = AssetKind;
            writer.SecuritySubtype = SecuritySubtype;
            writer.SecurityGroupCode = SecurityGroupCode;
            ActivationTimeLb?.serialize(writer.ActivationTimeLb);
            ActivationTimeUb?.serialize(writer.ActivationTimeUb);
            LastEligibleTradeTimeLb?.serialize(writer.LastEligibleTradeTimeLb);
            LastEligibleTradeTimeUb?.serialize(writer.LastEligibleTradeTimeUb);
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public CapnpGen.CmeAssetKind AssetKind
        {
            get;
            set;
        }

        public CapnpGen.CmeSecuritySubtype SecuritySubtype
        {
            get;
            set;
        }

        public string SecurityGroupCode
        {
            get;
            set;
        }

        public CapnpGen.UtcTime ActivationTimeLb
        {
            get;
            set;
        }

        public CapnpGen.UtcTime ActivationTimeUb
        {
            get;
            set;
        }

        public CapnpGen.UtcTime LastEligibleTradeTimeLb
        {
            get;
            set;
        }

        public CapnpGen.UtcTime LastEligibleTradeTimeUb
        {
            get;
            set;
        }

        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public CapnpGen.CmeAssetKind AssetKind => (CapnpGen.CmeAssetKind)ctx.ReadDataUShort(0UL, (ushort)0);
            public CapnpGen.CmeSecuritySubtype SecuritySubtype => (CapnpGen.CmeSecuritySubtype)ctx.ReadDataUShort(16UL, (ushort)0);
            public string SecurityGroupCode => ctx.ReadText(0, null);
            public CapnpGen.UtcTime.READER ActivationTimeLb => ctx.ReadStruct(1, CapnpGen.UtcTime.READER.create);
            public CapnpGen.UtcTime.READER ActivationTimeUb => ctx.ReadStruct(2, CapnpGen.UtcTime.READER.create);
            public CapnpGen.UtcTime.READER LastEligibleTradeTimeLb => ctx.ReadStruct(3, CapnpGen.UtcTime.READER.create);
            public CapnpGen.UtcTime.READER LastEligibleTradeTimeUb => ctx.ReadStruct(4, CapnpGen.UtcTime.READER.create);
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(1, 5);
            }

            public CapnpGen.CmeAssetKind AssetKind
            {
                get => (CapnpGen.CmeAssetKind)this.ReadDataUShort(0UL, (ushort)0);
                set => this.WriteData(0UL, (ushort)value, (ushort)0);
            }

            public CapnpGen.CmeSecuritySubtype SecuritySubtype
            {
                get => (CapnpGen.CmeSecuritySubtype)this.ReadDataUShort(16UL, (ushort)0);
                set => this.WriteData(16UL, (ushort)value, (ushort)0);
            }

            public string SecurityGroupCode
            {
                get => this.ReadText(0, null);
                set => this.WriteText(0, value, null);
            }

            public CapnpGen.UtcTime.WRITER ActivationTimeLb
            {
                get => BuildPointer<CapnpGen.UtcTime.WRITER>(1);
                set => Link(1, value);
            }

            public CapnpGen.UtcTime.WRITER ActivationTimeUb
            {
                get => BuildPointer<CapnpGen.UtcTime.WRITER>(2);
                set => Link(2, value);
            }

            public CapnpGen.UtcTime.WRITER LastEligibleTradeTimeLb
            {
                get => BuildPointer<CapnpGen.UtcTime.WRITER>(3);
                set => Link(3, value);
            }

            public CapnpGen.UtcTime.WRITER LastEligibleTradeTimeUb
            {
                get => BuildPointer<CapnpGen.UtcTime.WRITER>(4);
                set => Link(4, value);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0xf0b086b069af52bbUL)]
    public class CmeFuturesDefinitionRequest : ICapnpSerializable
    {
        public const UInt64 typeId = 0xf0b086b069af52bbUL;
        public enum WHICH : ushort
        {
            Specs = 0,
            Symbols = 1,
            undefined = 65535
        }

        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            switch (reader.which)
            {
                case WHICH.Specs:
                    Specs = reader.Specs?.ToReadOnlyList(_ => CapnpSerializable.Create<CapnpGen.CmeFuturesDefinitionSpec>(_));
                    break;
                case WHICH.Symbols:
                    Symbols = reader.Symbols;
                    break;
            }

            AvailableOnly = reader.AvailableOnly;
            applyDefaults();
        }

        private WHICH _which = WHICH.undefined;
        private object _content;
        public WHICH which
        {
            get => _which;
            set
            {
                if (value == _which)
                    return;
                _which = value;
                switch (value)
                {
                    case WHICH.Specs:
                        _content = null;
                        break;
                    case WHICH.Symbols:
                        _content = null;
                        break;
                }
            }
        }

        public void serialize(WRITER writer)
        {
            writer.which = which;
            switch (which)
            {
                case WHICH.Specs:
                    writer.Specs.Init(Specs, (_s1, _v1) => _v1?.serialize(_s1));
                    break;
                case WHICH.Symbols:
                    writer.Symbols.Init(Symbols);
                    break;
            }

            writer.AvailableOnly = AvailableOnly;
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public IReadOnlyList<CapnpGen.CmeFuturesDefinitionSpec> Specs
        {
            get => _which == WHICH.Specs ? (IReadOnlyList<CapnpGen.CmeFuturesDefinitionSpec>)_content : null;
            set
            {
                _which = WHICH.Specs;
                _content = value;
            }
        }

        public IReadOnlyList<string> Symbols
        {
            get => _which == WHICH.Symbols ? (IReadOnlyList<string>)_content : null;
            set
            {
                _which = WHICH.Symbols;
                _content = value;
            }
        }

        public bool AvailableOnly
        {
            get;
            set;
        }

        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public WHICH which => (WHICH)ctx.ReadDataUShort(0U, (ushort)0);
            public IReadOnlyList<CapnpGen.CmeFuturesDefinitionSpec.READER> Specs => which == WHICH.Specs ? ctx.ReadList(0).Cast(CapnpGen.CmeFuturesDefinitionSpec.READER.create) : default;
            public IReadOnlyList<string> Symbols => which == WHICH.Symbols ? ctx.ReadList(0).CastText2() : default;
            public bool AvailableOnly => ctx.ReadDataBool(16UL, false);
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(1, 1);
            }

            public WHICH which
            {
                get => (WHICH)this.ReadDataUShort(0U, (ushort)0);
                set => this.WriteData(0U, (ushort)value, (ushort)0);
            }

            public ListOfStructsSerializer<CapnpGen.CmeFuturesDefinitionSpec.WRITER> Specs
            {
                get => which == WHICH.Specs ? BuildPointer<ListOfStructsSerializer<CapnpGen.CmeFuturesDefinitionSpec.WRITER>>(0) : default;
                set => Link(0, value);
            }

            public ListOfTextSerializer Symbols
            {
                get => which == WHICH.Symbols ? BuildPointer<ListOfTextSerializer>(0) : default;
                set => Link(0, value);
            }

            public bool AvailableOnly
            {
                get => this.ReadDataBool(16UL, false);
                set => this.WriteData(16UL, value, false);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0xda207a7bf869dff8UL)]
    public class CmeFeedRequestSymbolAvailability : ICapnpSerializable
    {
        public const UInt64 typeId = 0xda207a7bf869dff8UL;
        public enum WHICH : ushort
        {
            Symbol = 0,
            SecurityId = 1,
            undefined = 65535
        }

        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            switch (reader.which)
            {
                case WHICH.Symbol:
                    Symbol = reader.Symbol;
                    break;
                case WHICH.SecurityId:
                    SecurityId = reader.SecurityId;
                    break;
            }

            Action = reader.Action;
            applyDefaults();
        }

        private WHICH _which = WHICH.undefined;
        private object _content;
        public WHICH which
        {
            get => _which;
            set
            {
                if (value == _which)
                    return;
                _which = value;
                switch (value)
                {
                    case WHICH.Symbol:
                        _content = null;
                        break;
                    case WHICH.SecurityId:
                        _content = 0;
                        break;
                }
            }
        }

        public void serialize(WRITER writer)
        {
            writer.which = which;
            switch (which)
            {
                case WHICH.Symbol:
                    writer.Symbol = Symbol;
                    break;
                case WHICH.SecurityId:
                    writer.SecurityId = SecurityId.Value;
                    break;
            }

            writer.Action = Action;
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public CapnpGen.AvailabilityAction Action
        {
            get;
            set;
        }

        public string Symbol
        {
            get => _which == WHICH.Symbol ? (string)_content : null;
            set
            {
                _which = WHICH.Symbol;
                _content = value;
            }
        }

        public int? SecurityId
        {
            get => _which == WHICH.SecurityId ? (int? )_content : null;
            set
            {
                _which = WHICH.SecurityId;
                _content = value;
            }
        }

        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public WHICH which => (WHICH)ctx.ReadDataUShort(16U, (ushort)0);
            public CapnpGen.AvailabilityAction Action => (CapnpGen.AvailabilityAction)ctx.ReadDataUShort(0UL, (ushort)0);
            public string Symbol => which == WHICH.Symbol ? ctx.ReadText(0, null) : default;
            public int SecurityId => which == WHICH.SecurityId ? ctx.ReadDataInt(32UL, 0) : default;
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(1, 1);
            }

            public WHICH which
            {
                get => (WHICH)this.ReadDataUShort(16U, (ushort)0);
                set => this.WriteData(16U, (ushort)value, (ushort)0);
            }

            public CapnpGen.AvailabilityAction Action
            {
                get => (CapnpGen.AvailabilityAction)this.ReadDataUShort(0UL, (ushort)0);
                set => this.WriteData(0UL, (ushort)value, (ushort)0);
            }

            public string Symbol
            {
                get => which == WHICH.Symbol ? this.ReadText(0, null) : default;
                set => this.WriteText(0, value, null);
            }

            public int SecurityId
            {
                get => which == WHICH.SecurityId ? this.ReadDataInt(32UL, 0) : default;
                set => this.WriteData(32UL, value, 0);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0xefbffd48250dba5aUL)]
    public enum FeedApiLoginResult : ushort
    {
        success,
        failedUnknownUser,
        failedBadPassword,
        invalid
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0xc6afe57c3aab05c9UL)]
    public enum FeedApiSetSymbolListResult : ushort
    {
        success,
        failedListNoPermission,
        failedListNotFound,
        failedAddListNoPermission,
        failedInvalidListNameFormat,
        invalid
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0xeda7f4bccca8b2a9UL)]
    public enum FeedApiEnvironment : ushort
    {
        invalid,
        production,
        newRelease,
        simulation,
        simulationAccelerated
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0xe82db6d58e86d86cUL)]
    public enum FeedApiRejectReason : ushort
    {
        notLoggedIn,
        noSymbolListSet
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0x8294b27c73ce4f78UL)]
    public class FeedApiReject : ICapnpSerializable
    {
        public const UInt64 typeId = 0x8294b27c73ce4f78UL;
        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            ReasonCode = reader.ReasonCode;
            ReasonText = reader.ReasonText;
            applyDefaults();
        }

        public void serialize(WRITER writer)
        {
            writer.ReasonCode = ReasonCode;
            writer.ReasonText = ReasonText;
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public CapnpGen.FeedApiRejectReason ReasonCode
        {
            get;
            set;
        }

        public string ReasonText
        {
            get;
            set;
        }

        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public CapnpGen.FeedApiRejectReason ReasonCode => (CapnpGen.FeedApiRejectReason)ctx.ReadDataUShort(0UL, (ushort)0);
            public string ReasonText => ctx.ReadText(0, null);
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(1, 1);
            }

            public CapnpGen.FeedApiRejectReason ReasonCode
            {
                get => (CapnpGen.FeedApiRejectReason)this.ReadDataUShort(0UL, (ushort)0);
                set => this.WriteData(0UL, (ushort)value, (ushort)0);
            }

            public string ReasonText
            {
                get => this.ReadText(0, null);
                set => this.WriteText(0, value, null);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0xd752f29963b82365UL)]
    public class FeedApiLogin : ICapnpSerializable
    {
        public const UInt64 typeId = 0xd752f29963b82365UL;
        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            User = reader.User;
            Password = reader.Password;
            SetSymbolList = CapnpSerializable.Create<CapnpGen.FeedApiSetSymbolList>(reader.SetSymbolList);
            applyDefaults();
        }

        public void serialize(WRITER writer)
        {
            writer.User = User;
            writer.Password = Password;
            SetSymbolList?.serialize(writer.SetSymbolList);
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public string User
        {
            get;
            set;
        }

        public string Password
        {
            get;
            set;
        }

        public CapnpGen.FeedApiSetSymbolList SetSymbolList
        {
            get;
            set;
        }

        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public string User => ctx.ReadText(0, null);
            public string Password => ctx.ReadText(1, null);
            public CapnpGen.FeedApiSetSymbolList.READER SetSymbolList => ctx.ReadStruct(2, CapnpGen.FeedApiSetSymbolList.READER.create);
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(0, 3);
            }

            public string User
            {
                get => this.ReadText(0, null);
                set => this.WriteText(0, value, null);
            }

            public string Password
            {
                get => this.ReadText(1, null);
                set => this.WriteText(1, value, null);
            }

            public CapnpGen.FeedApiSetSymbolList.WRITER SetSymbolList
            {
                get => BuildPointer<CapnpGen.FeedApiSetSymbolList.WRITER>(2);
                set => Link(2, value);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0x81695c7fe901f81cUL)]
    public class FeedApiLoginResponse : ICapnpSerializable
    {
        public const UInt64 typeId = 0x81695c7fe901f81cUL;
        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            Result = reader.Result;
            ListResult = reader.ListResult;
            FeedEnv = reader.FeedEnv;
            applyDefaults();
        }

        public void serialize(WRITER writer)
        {
            writer.Result = Result;
            writer.ListResult = ListResult;
            writer.FeedEnv = FeedEnv;
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public CapnpGen.FeedApiLoginResult Result
        {
            get;
            set;
        }

        public CapnpGen.FeedApiSetSymbolListResult ListResult
        {
            get;
            set;
        }

        public CapnpGen.FeedApiEnvironment FeedEnv
        {
            get;
            set;
        }

        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public CapnpGen.FeedApiLoginResult Result => (CapnpGen.FeedApiLoginResult)ctx.ReadDataUShort(0UL, (ushort)0);
            public CapnpGen.FeedApiSetSymbolListResult ListResult => (CapnpGen.FeedApiSetSymbolListResult)ctx.ReadDataUShort(16UL, (ushort)0);
            public CapnpGen.FeedApiEnvironment FeedEnv => (CapnpGen.FeedApiEnvironment)ctx.ReadDataUShort(32UL, (ushort)0);
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(1, 0);
            }

            public CapnpGen.FeedApiLoginResult Result
            {
                get => (CapnpGen.FeedApiLoginResult)this.ReadDataUShort(0UL, (ushort)0);
                set => this.WriteData(0UL, (ushort)value, (ushort)0);
            }

            public CapnpGen.FeedApiSetSymbolListResult ListResult
            {
                get => (CapnpGen.FeedApiSetSymbolListResult)this.ReadDataUShort(16UL, (ushort)0);
                set => this.WriteData(16UL, (ushort)value, (ushort)0);
            }

            public CapnpGen.FeedApiEnvironment FeedEnv
            {
                get => (CapnpGen.FeedApiEnvironment)this.ReadDataUShort(32UL, (ushort)0);
                set => this.WriteData(32UL, (ushort)value, (ushort)0);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0x81206df6ad647839UL)]
    public class FeedApiSetSymbolList : ICapnpSerializable
    {
        public const UInt64 typeId = 0x81206df6ad647839UL;
        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            ListName = reader.ListName;
            CreateList = reader.CreateList;
            applyDefaults();
        }

        public void serialize(WRITER writer)
        {
            writer.ListName = ListName;
            writer.CreateList = CreateList;
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public string ListName
        {
            get;
            set;
        }

        public bool CreateList
        {
            get;
            set;
        }

        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public string ListName => ctx.ReadText(0, null);
            public bool CreateList => ctx.ReadDataBool(0UL, false);
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(1, 1);
            }

            public string ListName
            {
                get => this.ReadText(0, null);
                set => this.WriteText(0, value, null);
            }

            public bool CreateList
            {
                get => this.ReadDataBool(0UL, false);
                set => this.WriteData(0UL, value, false);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0xe7515cf17807510aUL)]
    public class FeedApiSetSymbolListResponse : ICapnpSerializable
    {
        public const UInt64 typeId = 0xe7515cf17807510aUL;
        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            ListResult = reader.ListResult;
            applyDefaults();
        }

        public void serialize(WRITER writer)
        {
            writer.ListResult = ListResult;
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public CapnpGen.FeedApiSetSymbolListResult ListResult
        {
            get;
            set;
        }

        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public CapnpGen.FeedApiSetSymbolListResult ListResult => (CapnpGen.FeedApiSetSymbolListResult)ctx.ReadDataUShort(0UL, (ushort)0);
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(1, 0);
            }

            public CapnpGen.FeedApiSetSymbolListResult ListResult
            {
                get => (CapnpGen.FeedApiSetSymbolListResult)this.ReadDataUShort(0UL, (ushort)0);
                set => this.WriteData(0UL, (ushort)value, (ushort)0);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0xeb90dd6959dcf1d9UL)]
    public class FeedApiGetSymbolListContents : ICapnpSerializable
    {
        public const UInt64 typeId = 0xeb90dd6959dcf1d9UL;
        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            ListName = reader.ListName;
            applyDefaults();
        }

        public void serialize(WRITER writer)
        {
            writer.ListName = ListName;
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public string ListName
        {
            get;
            set;
        }

        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public string ListName => ctx.ReadText(0, null);
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(0, 1);
            }

            public string ListName
            {
                get => this.ReadText(0, null);
                set => this.WriteText(0, value, null);
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("capnpc-csharp", "1.3.0.0"), TypeId(0xbb8276e1cdea52a1UL)]
    public class FeedApiGetSymbolListContentsResponse : ICapnpSerializable
    {
        public const UInt64 typeId = 0xbb8276e1cdea52a1UL;
        void ICapnpSerializable.Deserialize(DeserializerState arg_)
        {
            var reader = READER.create(arg_);
            SymbolList = reader.SymbolList;
            SecurityIdList = reader.SecurityIdList;
            ErrorText = reader.ErrorText;
            applyDefaults();
        }

        public void serialize(WRITER writer)
        {
            writer.SymbolList.Init(SymbolList);
            writer.SecurityIdList.Init(SecurityIdList);
            writer.ErrorText = ErrorText;
        }

        void ICapnpSerializable.Serialize(SerializerState arg_)
        {
            serialize(arg_.Rewrap<WRITER>());
        }

        public void applyDefaults()
        {
        }

        public IReadOnlyList<string> SymbolList
        {
            get;
            set;
        }

        public IReadOnlyList<int> SecurityIdList
        {
            get;
            set;
        }

        public string ErrorText
        {
            get;
            set;
        }

        public struct READER
        {
            readonly DeserializerState ctx;
            public READER(DeserializerState ctx)
            {
                this.ctx = ctx;
            }

            public static READER create(DeserializerState ctx) => new READER(ctx);
            public static implicit operator DeserializerState(READER reader) => reader.ctx;
            public static implicit operator READER(DeserializerState ctx) => new READER(ctx);
            public IReadOnlyList<string> SymbolList => ctx.ReadList(0).CastText2();
            public IReadOnlyList<int> SecurityIdList => ctx.ReadList(1).CastInt();
            public string ErrorText => ctx.ReadText(2, null);
        }

        public class WRITER : SerializerState
        {
            public WRITER()
            {
                this.SetStruct(0, 3);
            }

            public ListOfTextSerializer SymbolList
            {
                get => BuildPointer<ListOfTextSerializer>(0);
                set => Link(0, value);
            }

            public ListOfPrimitivesSerializer<int> SecurityIdList
            {
                get => BuildPointer<ListOfPrimitivesSerializer<int>>(1);
                set => Link(1, value);
            }

            public string ErrorText
            {
                get => this.ReadText(2, null);
                set => this.WriteText(2, value, null);
            }
        }
    }
}